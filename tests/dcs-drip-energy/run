#!/usr/bin/perl

# --------------------------------------------------------------------------------------------
# dcs-drip-energy
#
# Test naming convention:
#   d  = DoH
#   cs = coldstart ("start" blockchain driver strategy, from scratch -- 'cold')
# --------------------------------------------------------------------------------------------
# This test was designed to work with the doh-coldstart "start" strategy (node start) and
#   with the hg1/hg2 (staging/dev) targets only. This test will NOT presently work with the
#   hgm (production) target because the production target for the DoH contract build system
#   does not yet support building a version of it with the deterministic clock and oracle
#   (which would be enabled by an #IFDEF for testing, and not for actual deployment).
#
# A "start strategy" driver means "runs local tests" in practice and for now, though you
#   could have a remote start driver as well (i.e. something that ssh's on a remote machine
#   and starts nodeos).
# --------------------------------------------------------------------------------------------
# This is a functional test focused on the distrib contract in period_reset_mode == true,
#   which is the mode the code operates in when it is deployed and init'ed in energy.tcn
#   for example.
#
# This test does the following:
# - Create 50 players and spawn a char for each
# - For phases = 1 to 3
#   - All chars spam random amounts of random actions to spend energy in various ways
#     (advancing clock as needed to recuperate energy)
#   - The players #1 to #30*phase make TCN/drip claims
#   - Advance clock sufficiently to end the day
#   - Obtain (& print) raw results
#   - Assert on a bunch of invariants on players, drip contract objects, global objects, ...
# --------------------------------------------------------------------------------------------

use strict;
use warnings;

# include the tools/cth-goodies library
use lib '../../tools/cth-goodies';
use CthGoodies;

# include the tools/doh-goodies library
use lib '../../tools/doh-goodies';
use DoHGoodies;

# -----------------------------------------------------------------------
# Test logic & global parameters
# -----------------------------------------------------------------------

# CHANGED: We are changing this test to work with hg1 and hg2 (which support
#   deterministic clock and oracle, but sadly hgm doesn't yet)
my $doh_target = "hg2";

# FIXME/TODO: This has to be obtained either from the source code of the target or
#             the running contract (e.g. consulting the readonly contract)
my $ONE_DAY = 300;

my $tcn_target; # calculated later to match doh_target

# Maximum number of players has been set to 50 in one of the version of
#   the code, so we're going to be using that number a lot for tests.
my $doh_max_players      = 30;
my $doh_test_phases      = 3;
my $doh_test_group_size  = $doh_max_players / $doh_test_phases;

my $gmplayer = 'dohplayer.aa';   # game master & default tx/action signer for cleos calls

my $energy_cost_work;   # cost of 1 work action (e.g. a char mines its tile); calculated later

my $FARM = 3;   # work code

my $o;
my $ret;

# --------------------------------------------------------------------------------------------
# Parse command-line parameters.
#
# Give a list of expected switches and options to the CthGoodies standard parser.
#
# The cleos_url switch is ignored. The doh-coldstart driver currently starts at the
#    default cleos address (https://127.0.0.1:8888).
# --------------------------------------------------------------------------------------------

my ($switches, $options) = cth_standard_args_parser(

    # List of switches (--switchname switchvalue, or --switchname=switchvalue)
    #   that this particular test expects or knows about.
    # If the test receives any switch not listed here, the test fails. That
    #   means the test is not engineered towards the environment of the test run.

    "cleos_url target",

    # List of options (-o optionname=optionvalue, or --option optioname=optionvalue)
    #   that this particular test expects or knows about.
    # If the test receives any options not listed here, the argument parser will
    #   print a warning, but the test will continue. The option will just be
    #   ignored.

    ""

    );

# --------------------------------------------------------------------------------------------
# *********************** FIXME/TODO/REVIEW **************************************************
# TEMPORARY: TEST IS DISABLED if cleos_url is given (possibility of remote execution)
#            so we are not destroying the ux5 telegram bot on accident
#
# ... but this doesn't matter for "start" strategy drivers which is what this test uses.
#     I guess you could (?) specify a cleos_url that points to a different port (possible),
#     or an IP address that a super smart start driver would know how to ssh into and start
#     a nodeos *there* (less likely).
#     So when "127.0.0.1:DIFFERENT-PORT" is used via cleos_url, this will need to be removed
#     (the start driver will have to know that the nodeos has to start at that port, and
#      change the config.ini of nodeos accordingly to configure the HTTP endpoint, and also
#      a different P2P endpoint!)
# --------------------------------------------------------------------------------------------

if (exists $switches->{'cleos_url'}) {
    print "SKIP: TEMPORARY DISABLE TEST IF CLEOS_URL GIVEN AT ALL.\n";
    cth_skip_test();
}

# -----------------------------------------------------------------------------------------
# Staging & dev contract source code only.
# -----------------------------------------------------------------------------------------
if (exists $switches->{'target'} && ($switches->{'target'} eq "hg1" || $switches->{'target'} eq "hg2")) {
    print "SKIP: DoH target " . $switches->{'target'} . " provided but this test only supports hg1 (staging) and hg2 (dev) DoH code, since e.g. hgm does not have deterministic clock and oracle provided to the test system.\n";
    cth_skip_test();
}

$tcn_target = doh_get_tcn_target($doh_target);
print "TCN target set to: $tcn_target\n";

# -----------------------------------------------------------------------------------------
# Start required drivers
# -----------------------------------------------------------------------------------------

# doh_init takes care of the cleos-driver for us
#
#$ret = cth_set_cleos_provider("cleos-driver");
#if ($ret) { die "ERROR: cth_set_cleos_provider failed\n"; }
#
$ret = doh_init($doh_target, $gmplayer);
if ($ret) { die "ERROR: doh_init failed\n"; }

$ret = cth_call_driver("doh-coldstart", "configure --target=" . $doh_target);
if ($ret) { die "ERROR: cth_call_driver failed\n"; }

$ret = cth_call_driver("doh-coldstart", "start");
if ($ret) { die "ERROR: cth_call_driver failed\n"; }

# --------------------------------------------------------------------------------------------
# We will shut down the driver and fail the test whenever a test step fails.
# --------------------------------------------------------------------------------------------

sub cleanup {
    $ret = cth_call_driver("doh-coldstart", "stop");
    if ($ret) { die "ERROR: cth_call_driver failed\n"; }   # questionable whether this is actually needed
}

sub crashed {
    print "ERROR: Test has crashed.\n";
    cleanup();
    die;
}

sub failed {
    print "ERROR: Test has failed.\n";
    cleanup();
    die;
}

# --------------------------------------------------------------------------------------------
# Test logic here
# --------------------------------------------------------------------------------------------

my $expected;
my $actual;

# We are first doing a basic test scenario:
# - Some players work, some players claim, for a day; check TCN is delivered to people in the expected proportion.
#
# FIXME/TODO: Advanced test scenarios:
#
# The other function we need to cover with the unit tests is the transfer notification handler, which is triggered by the inflation payment, which is itself initiated by the endday action in the hegemon.hgm contract.
# For instance, we need to be testing situations where a single deposit is received, multiple deposits are received or no deposits are received for a given period.
# We must also test periods where multiple users are eligible, where a single user is eligible, and where no users are eligible.
# We need to test users sometimes performing actions, and sometimes not, over a number of periods.
# Invariants tested:
# - if  spend x energy yields Y% of the TCN, then spending x' energy should yield Y'% of the inflation TCN.  (?)

# **********************
# One-time (?) initialization rites
# deterministic clock & rng oracle, TCN token, boot staking system, add some factions because why not, game master (gm), tile type, planet, region, two tiles
#
# FIXME/TODO: move this into the DoHGoodies lib e.g. doh_test_boot_std() will initialize a simple standard test world.
# **********************

crashed() if cth_cleos(qq|push action clock.${doh_target} useclock '{}' -p clock.${doh_target}|);

# This takes care of also initializing energy.tc? and rep.tc? with the period_reset_mode set to true (the correct value for these).
crashed() if cth_cleos(qq|push action staking.${tcn_target} init '{ "distrib_contracts": [ "energy.${tcn_target}", "rep.${tcn_target}"], "drip_contracts": [ "main.${tcn_target}", "players.${tcn_target}"] }' -p staking.${tcn_target}|);

## Already commented out
###cleos -u "$endpoint" --verbose push action hegemon.hg1 updaterng '{}' --force-unique -p hegemon.hg1 >> log 2>&1

crashed() if cth_cleos(qq|push action clock.${doh_target} sethash '{"hash":"092ba25b75b0ee1ac79c5a1aa1df28a5129cd8d15b878fdb50dc804fda79dbc7"}' --force-unique -p clock.${doh_target}|);

crashed() if cth_cleos(qq|push action main.${tcn_target} adddrip '{"symbol":"4,TCN", "contract":"tokens.${tcn_target}", "buckets":["players.${tcn_target}"], "shares":[10000]}' --force-unique -p main.${tcn_target}\@active|);
crashed() if cth_cleos(qq|push action players.${tcn_target} adddrip '{"symbol":"4,TCN", "contract":"tokens.${tcn_target}", "buckets":["energy.${tcn_target}","rep.${tcn_target}"], "shares":[7000, 3000]}' --force-unique -p players.${tcn_target}\@active|);

crashed() if cth_cleos(qq|push action tokens.${tcn_target} create '{"issuer":"hegemon.${doh_target}", "maximum_supply":"100000000000.0000 TCN"}' -p tokens.${tcn_target}\@active|);
crashed() if cth_cleos(qq|push action tokens.${tcn_target} issue '{"to":"hegemon.${doh_target}", "quantity":"100000000.0000 TCN", "memo":"initial issuance"}' -p hegemon.${doh_target}\@active|);
crashed() if cth_cleos(qq|transfer hegemon.${doh_target} reserve.${tcn_target} "100000000.0000 TCN" "" --contract tokens.${tcn_target} -p hegemon.${doh_target}\@active|);

crashed() if cth_cleos(qq|push action hegemon.${doh_target} setgm '{"player":"$gmplayer"}' -p hegemon.${doh_target}|);

crashed() if cth_cleos(qq|push action hegemon.${doh_target} addfaction '{"id":1, "global_entity_id":52, "name":"Empire", "code":"em", "flag_asset_url":"/factions-flags/flag-empire.jpg"}' -p hegemon.${doh_target}|);
crashed() if cth_cleos(qq|push action hegemon.${doh_target} addfaction '{"id":2, "global_entity_id":53, "name":"Confederacy", "code":"co", "flag_asset_url":"/factions-flags/flag-confederacy.jpg"}' -p hegemon.${doh_target}|);
crashed() if cth_cleos(qq|push action hegemon.${doh_target} addfaction '{"id":3, "global_entity_id":54, "name":"Alliance", "code":"al", "flag_asset_url":"/factions-flags/flag-alliance.jpg"}' -p hegemon.${doh_target}|);
crashed() if cth_cleos(qq|push action hegemon.${doh_target} addfaction '{"id":4, "global_entity_id":55, "name":"Dominion", "code":"do", "flag_asset_url":"/factions-flags/flag-dominion.jpg"}' -p hegemon.${doh_target}|);

crashed() if cth_cleos(qq|push action crafting.${doh_target} addeffect '{"id":8, "name":"Plains", "description":"Farming production output increased by 50%. Mining production output decreased by 50%", "modifiers":[{ "modified_stat" : 3, "modifier_operator": 1, "condition": { "target":2, "filter":null, "value": 3 }, "value": 50 }, { "modified_stat" : 3, "modifier_operator": 1, "condition": { "target":2, "filter":null, "value": 1 }, "value": -50 }], "duration":-1 }' -p crafting.${doh_target}|);

crashed() if cth_cleos(qq|push action hegemon.${doh_target} addplanet '{"id":1, "area_map":"tulon","name":"Tulon", "code":"tu", "code":"tu", "asset_url":"/planets/tulon.png"}' -p hegemon.${doh_target}|);

crashed() if cth_cleos(qq|push action hegemon.${doh_target} addregion '{"id":1, "area_map":"tulon","name":"Nefari", "code":"ne"}' -p hegemon.${doh_target}|);

crashed() if cth_cleos(qq|push action hegemon.${doh_target} addterrain '{"id":1, "type":"Plains", "map_asset_url":"/tiles/tile-plains.jpg", "background_asset_url":"/character-backgrounds/character-background-plains.png", "building_slots":6, "effects":[8]}' -p hegemon.${doh_target}|);

crashed() if cth_cleos(qq|push action hegemon.${doh_target} addtile '{"id":1,"area_map":"tulon","region_id":1,"q_coord":0,"r_coord":0,"terrain_type":1}' -p hegemon.${doh_target}|);
crashed() if cth_cleos(qq|push action hegemon.${doh_target} addtile '{"id":2,"area_map":"tulon","region_id":1,"q_coord":0,"r_coord":1,"terrain_type":1}' -p hegemon.${doh_target}|);

crashed() if cth_cleos(qq|push action staking.${tcn_target} enable '{}' -p staking.${tcn_target}|);

# **********************
# Create 30 test player accounts: dohplayer.aa , dohplayer.ab , dohplayer.ac   etc.
# Also create each char, they will have the expected char ids 1-30
# Also does some init stuff
# **********************

my $char1    = 1;
my $player1  = 'dohplayer.aa';

my @players = cth_generate_account_names('dohplayer.', 'aa', $doh_max_players);

my $player_id = 0;

foreach my $player (@players) {

    # push a character name for this player
    $player_id++;
    crashed() if cth_cleos(qq|push action names.${doh_target} addcname '{"id":1, "first_name":"Jimmy", "middle_name":"$player", "last_name":"Page", "asset_url":"/characters/character-jimmy-page-neutral.png"}' -p names.${doh_target}|);

    # create account
    crashed() if cth_cleos(qq|system newaccount eosio $player EOS6MRyAjQq8ud7hVNYcfnVPJqcVpscN5So8BhtHuGYqET5GDW5CV --stake-cpu "10000.0000 EOS" --stake-net "10000.0000 EOS" --buy-ram-kbytes 1000 --transfer|);

    # setup dejavu
    crashed() if cth_cleos(qq|push action dejavu.${doh_target} setplayer '{"p":{"owner":"$player", "asset_url":"/players/empire/player-empire-01.png", "count":0, "reputation":0, "faction_id":1, "location_tile_id":1}}' -p hegemon.${doh_target}|);

    # regplayer
    crashed() if cth_cleos(qq|push action hegemon.${doh_target} regplayer '{"player":"$player", "opt_out_of_politics":0}' --force-unique -p $player|);

    # create this player's char
    crashed() if cth_cleos(qq|push action hegemon.${doh_target} createchar '{"player":"$player"}' --force-unique -p $player|);
}

# **********************
# Benchmark the energy uses of the activities weso it will be using
# which tells us the numerator (spent energy --> TCN inflation) increases per player
# **********************

# Total number of times we worked
my $total_work = 0;

print "Will calculate the energy expenditure of in-game actions.\n";

# For now, work will be sufficient for this test.
# Let's not write complicated tests before we have decent test libraries.

print "Calculating cost of work action...\n";

my $e1 = doh_get_char_energy($char1);
crashed() if ($e1 < 0);

print "Char $char1 energy before work: $e1\n";

crashed() if cth_cleos(qq|push action hegemon.${doh_target} dowork '[$char1, $FARM]' --force-unique -p $player1|);
$total_work++;

my $e2 = doh_get_char_energy($char1);
crashed() if ($e2 < 0);

print "Char $char1 energy after work: $e2\n";

$energy_cost_work = $e1 - $e2;

print "Energy cost of work is: $energy_cost_work\n";

# **********************
# We will run this test three times.
# In each phase, a new third of the players will do work, starting at the current day.
# The day is advanced at the end of the work phase, and claims are made for all players that worked.
# **********************

print "Running the 3 phases of the test.\n";

for (my $phase = 1; $phase <= $doh_test_phases; $phase++) {

    print "Running test phase $phase/$doh_test_phases ...\n";

    # -----------------------------------------------------------------------------------------
    # The players #1 to #group-size*phase do "random" (pid % 5) amounts of work.
    # -----------------------------------------------------------------------------------------

    for (my $pid = 1; $pid <= $doh_test_group_size * $phase; $pid++) {

        my $player_name = $players[ $pid - 1 ];

        # We expect the player's char to have the same ID since each player creates exactly 1 char.
        my $char_id = $pid;

        # all chars mine pid % 5 times
        # except player1 which has 1 extra work cycle from the benchmark step above
        my $work_count = ($pid % 5) + 1;
        print "Player $pid ('$player_name') will work $work_count times today\n";
        for (my $i = 1; $i <= $work_count; $i++) {
            crashed() if cth_cleos(qq|push action hegemon.${doh_target} dowork '[$char_id, $FARM]' --force-unique -p $player_name|);
            $total_work++;
        }
    }

    # -----------------------------------------------------------------------------------------
    # Check that all numerators are the values that are expected of that player at the
    #    end of a day of work.
    # -----------------------------------------------------------------------------------------

    print "Checking numerator of all players whose characters have worked today...\n";

    for (my $pid = 1; $pid <= $doh_test_group_size * $phase; $pid++) {

        my $player_name = $players[ $pid - 1 ];

        my $num = cth_cleos_pipe(qq*get table energy.${tcn_target} energy.${tcn_target} users -L$player_name -U$player_name | jq .rows[0].numerator | tr -d '"'*);
        crashed() if (!defined $num);

        my $work_cycles = ($pid % 5) + 1;
        if ($pid == 1 && $phase == 1) { $work_cycles++; } # extra work on first day to benchmark work cost

        $expected = $work_cycles * $energy_cost_work;   # $energy_cost_work should be 30 if nothing changed, and the numerator is directly a sum of spent energy working

        cth_assert("player $player_name numerator $num equals $work_cycles work cycles (i.e. $expected)", "$expected == $num");
    }

    # -----------------------------------------------------------------------------------------
    # Advance clock, end the day
    # -----------------------------------------------------------------------------------------

    crashed() if cth_cleos(qq|push action clock.${doh_target} clockaddsec '{"seconds":$ONE_DAY}' --force-unique -p clock.${doh_target}|);

    # Check that the inflation data makes basic sense

    my $text_blob = cth_cleos_pipe(qq|push action hegemon.${doh_target} endday '{}' --force-unique -p hegemon.${doh_target}|);
    crashed() if (! defined $text_blob);

    my $daily_inflation;
    my $energy_transfer;
    my $rep_transfer;

    if ($text_blob =~ /daily_inflation : (\d+\.\d+) TCN/) {
        $daily_inflation = $1;
    } else {
        print "ERROR: can't find endday daily_inflation\n";
        crashed();
    }
    if ($text_blob =~ /Transfer detected : players\.tc. energy\.tc. (\d+\.\d+) TCN/) {
        $energy_transfer = $1;
    } else {
        print "ERROR: can't find endday energy transfer\n";
        crashed();
    }
    if ($text_blob =~ /Transfer detected : players\.tc. rep\.tc. (\d+\.\d+) TCN/) {
        $rep_transfer = $1;
    } else {
        print "ERROR: can't find endday rep transfer\n";
        crashed();
    }

    if ($daily_inflation > 0 && ($energy_transfer + $rep_transfer) == $daily_inflation) {
        print "Consistent hegemon::endday result received:\n";
        print "Daily Inflation: $daily_inflation TCN\n";
        print "Energy Transfer: $energy_transfer TCN\n";
        print "Rep Transfer: $rep_transfer TCN\n";
    } else {
        print "ERROR: Invalid data from hegemon::endday.\n";
        failed();
    }

    # Check that the end of the day has been reached as expected

    my $date_string = cth_cleos_pipe(qq*get table hegemon.${doh_target} hegemon.${doh_target} global | jq .rows[0].day_stats.day_start | tr -d '"'*);

    crashed() if (!defined $date_string);

    $expected = $ONE_DAY * $phase;

    $actual = qx(TZ=UTC date -d "$date_string" +"%s");
    chomp($actual);

    failed() if cth_assert("unix timestamp for day_start is $expected", "$expected == $actual");

    # -----------------------------------------------------------------------------------------
    # The players #1 to #group-size*phase make TCN/drip claims
    # -----------------------------------------------------------------------------------------

#    if ($phase > 999) {

        for (my $pid = 1; $pid <= $doh_test_group_size * $phase; $pid++) {

            my $player_name = $players[ $pid - 1 ];

            print "Player $pid ('$player_name') will now claim their TCN.\n";
            crashed() if cth_cleos(qq|push action energy.${tcn_target} claim '[$player_name]' -p $player_name|);
        }
 #   } else {
 #       print "Skipping claims in phase 1 as it seems no TCN is given in the first day.\n";
 #   }

    # -----------------------------------------------------------------------------------------
    # Check that the TCN balance between all players is proportional to their work.
    # Check that all TCN has been distributed.
    # -----------------------------------------------------------------------------------------

    # just check p1's money for now until this is not zero (FIXME/TODO) 

    my $player_name = $players[ 1 ];

    my $bal = cth_cleos_pipe(qq*get table tokens.${tcn_target} $player_name accounts*); # | jq .rows[0].day_stats.day_start | tr -d '"'*);

    print "P1 MONEY PHASE $phase is: $bal\n";

  #  if ($phase > 999) {

   #     for (my $pid = 1; $pid <= $doh_max_players; $pid++) {

    #        my $player_name = $players[ $pid - 1 ];

     #       my $bal = cth_cleos_pipe(qq*get table tokens.${tcn_target} $player_name accounts*); # | jq .rows[0].day_stats.day_start | tr -d '"'*);

      #      print "Player $pid ('$player_name') balance: $bal\n";
       # }
    #} else {
    #    print "Skipping printing the balances in phase 1 as it seems no TCN is given in the first day\n";
    #}
}

# --------------------------------------------------------------------------------------------
# Test done; default return value is zero (success).
# --------------------------------------------------------------------------------------------

cleanup();
