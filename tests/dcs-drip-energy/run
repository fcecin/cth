#!/usr/bin/perl

# --------------------------------------------------------------------------------------------
# dcs-drip-energy
#
# Test naming convention:
#   d  = DoH
#   cs = coldstart ("start" blockchain driver strategy, from scratch -- 'cold')
# --------------------------------------------------------------------------------------------
# This test was designed to work with the doh-coldstart "start" strategy (node start) and
#   with the hg1/hg2 (staging/dev) targets only. This test will NOT presently work with the
#   hgm (production) target because the production target for the DoH contract build system
#   does not yet support building a version of it with the deterministic clock and oracle
#   (which would be enabled by an #IFDEF for testing, and not for actual deployment).
#
# A "start strategy" driver means "runs local tests" in practice and for now, though you
#   could have a remote start driver as well (i.e. something that ssh's on a remote machine
#   and starts nodeos).
# --------------------------------------------------------------------------------------------
# This is a functional test focused on the distrib contract in period_reset_mode == true,
#   which is the mode the code operates in when it is deployed and init'ed in energy.tcn
#   for example.
# --------------------------------------------------------------------------------------------

use strict;
use warnings;

# include the tools/cth-goodies library
use lib '../../tools/cth-goodies';
use CthGoodies;

# include the tools/doh-goodies library
use lib '../../tools/doh-goodies';
use DoHGoodies;

# -----------------------------------------------------------------------
# Test logic & global parameters
# -----------------------------------------------------------------------

# CHANGED: We are changing this test to work with hg1 and hg2 (which support
#   deterministic clock and oracle, but sadly hgm doesn't yet)
my $doh_target = "hg2";

# FIXME/TODO: This has to be obtained either from the source code of the target or
#             the running contract (e.g. consulting the readonly contract)
my $ONE_DAY             = 300;
my $DAYS_PER_CYCLE      = 6;
my $CYCLES_PER_PERIOD   = 3;
my $DAYS_PER_PAYMENT    = $DAYS_PER_CYCLE * $CYCLES_PER_PERIOD;

my $tcn_target; # calculated later to match doh_target

# Maximum number of players has been set to 50 in one of the version of
#   the code, so we're going to be using that number a lot for tests.
my $doh_max_players      = 30;

my $gmplayer = 'dohplayer.aa';   # game master & default tx/action signer for cleos calls

my $o;
my $ret;

# --------------------------------------------------------------------------------------------
# Parse command-line parameters.
#
# Give a list of expected switches and options to the CthGoodies standard parser.
#
# The cleos_url switch is ignored. The doh-coldstart driver currently starts at the
#    default cleos address (https://127.0.0.1:8888).
# --------------------------------------------------------------------------------------------

my ($switches, $options) = cth_standard_args_parser(

    # List of switches (--switchname switchvalue, or --switchname=switchvalue)
    #   that this particular test expects or knows about.
    # If the test receives any switch not listed here, the test fails. That
    #   means the test is not engineered towards the environment of the test run.

    "cleos_url target",

    # List of options (-o optionname=optionvalue, or --option optioname=optionvalue)
    #   that this particular test expects or knows about.
    # If the test receives any options not listed here, the argument parser will
    #   print a warning, but the test will continue. The option will just be
    #   ignored.

    ""

    );

# --------------------------------------------------------------------------------------------
# *********************** FIXME/TODO/REVIEW **************************************************
# TEMPORARY: TEST IS DISABLED if cleos_url is given (possibility of remote execution)
#            so we are not destroying the ux5 telegram bot on accident
#
# ... but this doesn't matter for "start" strategy drivers which is what this test uses.
#     I guess you could (?) specify a cleos_url that points to a different port (possible),
#     or an IP address that a super smart start driver would know how to ssh into and start
#     a nodeos *there* (less likely).
#     So when "127.0.0.1:DIFFERENT-PORT" is used via cleos_url, this will need to be removed
#     (the start driver will have to know that the nodeos has to start at that port, and
#      change the config.ini of nodeos accordingly to configure the HTTP endpoint, and also
#      a different P2P endpoint!)
# --------------------------------------------------------------------------------------------

if (exists $switches->{'cleos_url'}) {
    print "SKIP: TEMPORARY DISABLE TEST IF CLEOS_URL GIVEN AT ALL.\n";
    cth_skip_test();
}

# -----------------------------------------------------------------------------------------
# Staging & dev contract source code only.
# -----------------------------------------------------------------------------------------
if (exists $switches->{'target'} && ($switches->{'target'} eq "hg1" || $switches->{'target'} eq "hg2")) {
    print "SKIP: DoH target " . $switches->{'target'} . " provided but this test only supports hg1 (staging) and hg2 (dev) DoH code, since e.g. hgm does not have deterministic clock and oracle provided to the test system.\n";
    cth_skip_test();
}

$tcn_target = doh_get_tcn_target($doh_target);
print "TCN target set to: $tcn_target\n";

# -----------------------------------------------------------------------------------------
# Start required drivers
# -----------------------------------------------------------------------------------------

# doh_init takes care of the cleos-driver for us
#
#$ret = cth_set_cleos_provider("cleos-driver");
#if ($ret) { die "ERROR: cth_set_cleos_provider failed\n"; }
#
$ret = doh_init($doh_target, $gmplayer);
if ($ret) { die "ERROR: doh_init failed\n"; }

$ret = cth_call_driver("doh-coldstart", "configure --target=" . $doh_target);
if ($ret) { die "ERROR: cth_call_driver failed\n"; }

$ret = cth_call_driver("doh-coldstart", "start");
if ($ret) { die "ERROR: cth_call_driver failed\n"; }

# --------------------------------------------------------------------------------------------
# We will shut down the driver and fail the test whenever a test step fails.
# --------------------------------------------------------------------------------------------

sub cleanup {
    $ret = cth_call_driver("doh-coldstart", "stop");
    if ($ret) { die "ERROR: cth_call_driver failed\n"; }   # questionable whether this is actually needed
}

sub crashed {
    print "ERROR: Test has crashed.\n";
    cleanup();
    die;
}

sub failed {
    print "ERROR: Test has failed.\n";
    cleanup();
    die;
}

# --------------------------------------------------------------------------------------------
# Test logic here
# --------------------------------------------------------------------------------------------

my $expected;
my $actual;
my $dist;
my $total_work = 0;
my $energy_cost_work;   # cost of 1 work action (e.g. a char mines its tile); calculated later
my $FARM = 3;           # work code
my @players;            # used by do_player_work sub so declare here

sub run_endday_and_test {

    print "Starting run_endday_and_test().\n";

    my $day_number = shift;
    crashed() if (! defined $day_number);
    my $work_was_done = shift;
    crashed() if (! defined $work_was_done);

    print "Ending day $day_number; work done today? = $work_was_done\n";

    crashed() if cth_cleos(qq|push action clock.${doh_target} clockaddsec '{"seconds":$ONE_DAY}' --force-unique -p clock.${doh_target}|);

    my $text_blob = cth_cleos_pipe(qq|push action hegemon.${doh_target} endday '{}' --force-unique -p hegemon.${doh_target}|);
    crashed() if (! defined $text_blob);

    if ($work_was_done) {

        # Check that the inflation data makes basic sense
        my $daily_inflation;
        my $energy_transfer;
        my $rep_transfer;

        if ($text_blob =~ /daily_inflation : (\d+\.\d+) TCN/) {
            $daily_inflation = $1;
        } else {
            print "ERROR: can't find endday daily_inflation\n";
            crashed();
        }
        if ($text_blob =~ /Transfer detected : players\.tc. energy\.tc. (\d+\.\d+) TCN/) {
            $energy_transfer = $1;
        } else {
            print "ERROR: can't find endday energy transfer\n";
            crashed();
        }
        if ($text_blob =~ /Transfer detected : players\.tc. rep\.tc. (\d+\.\d+) TCN/) {
            $rep_transfer = $1;
        } else {
            print "ERROR: can't find endday rep transfer\n";
            crashed();
        }

        if ($daily_inflation > 0 && ($energy_transfer + $rep_transfer) == $daily_inflation) {
            print "Consistent hegemon::endday result received:\n";
            print "Daily Inflation: $daily_inflation TCN\n";
            print "Energy Transfer: $energy_transfer TCN\n";
            print "Rep Transfer: $rep_transfer TCN\n";
        } else {
            print "ERROR: Invalid data from hegemon::endday.\n";
            failed();
        }
    }

    # Check that the end of the day has been reached as expected

    print "Checking that we indeed ended day $day_number ...\n";

    my $date_string = cth_cleos_pipe(qq*get table hegemon.${doh_target} hegemon.${doh_target} global | jq .rows[0].day_stats.day_start | tr -d '"'*);

    crashed() if (!defined $date_string);

    $expected = $ONE_DAY * $day_number;

    $actual = qx(TZ=UTC date -d "$date_string" +"%s");
    chomp($actual);

    failed() if cth_assert("unix timestamp for day_start is $expected", "$expected == $actual");

    print "Finished run_endday_and_test().\n";
}

sub do_player_work {

    print "Starting do_player_work().\n";

    my $day_number = shift;
    crashed() if (! defined $day_number);

    # -----------------------------------------------------------------------------------------
    # The players do ((pid-1) % 5) + 1 work actions on their day
    # -----------------------------------------------------------------------------------------

    print "Players are doing 'random' work with their characters in day $day_number.\n";

    for (my $pid = 1; $pid <= $doh_max_players; $pid++) {

        my $player_name = $players[ $pid - 1 ];

        # We expect the player's char to have the same ID since each player creates exactly 1 char.
        my $char_id = $pid;

        # all chars mine pid % 5 times
        # except player1 which has 1 extra work cycle from the benchmark step above
        my $work_count = (($pid - 1) % 5) + 1;
        print "Player $pid ('$player_name') will work $work_count times today\n";
        for (my $i = 1; $i <= $work_count; $i++) {
            crashed() if cth_cleos(qq|push action hegemon.${doh_target} dowork '[$char_id, $FARM]' --force-unique -p $player_name|);
            $total_work++;
        }
    }

    # -----------------------------------------------------------------------------------------
    # Check that all numerators are the values that are expected of that player at the
    #    end of a day of work.
    # -----------------------------------------------------------------------------------------

    print "Checking numerator of all players whose characters have worked today...\n";

    for (my $pid = 1; $pid <= $doh_max_players; $pid++) {

        my $player_name = $players[ $pid - 1 ];

        my $num = cth_cleos_pipe(qq*get table energy.${tcn_target} energy.${tcn_target} users -L$player_name -U$player_name | jq .rows[0].numerator | tr -d '"'*);
        crashed() if (!defined $num);
        chomp($num);

        my $work_cycles = (($pid - 1) % 5) + 1;
        if ($pid == 1 && $day_number == 1) { $work_cycles++; } # extra work on first day to account for the work cost benchmark done with dohplayer.aa

        $expected = $work_cycles * $energy_cost_work;   # $energy_cost_work should be 30 if nothing changed, and the numerator is directly a sum of spent energy working

        failed() if cth_assert("player $player_name numerator $num equals $work_cycles work cycles (i.e. $expected)", "$expected == $num");
    }

    print "Finished do_player_work().\n";
}


# FIXME/TODO: Advanced test scenarios (check that all of these are in fact covered):
#
# The other function we need to cover with the unit tests is the transfer notification handler, which is triggered by the inflation payment, which is itself initiated by the endday action in the hegemon.hgm contract.
# For instance, we need to be testing situations where a single deposit is received, multiple deposits are received or no deposits are received for a given period.
# We must also test periods where multiple users are eligible, where a single user is eligible, and where no users are eligible.
# We need to test users sometimes performing actions, and sometimes not, over a number of periods.


# **********************
# One-time (?) initialization rites
# deterministic clock & rng oracle, TCN token, boot staking system, add some factions because why not, game master (gm), tile type, planet, region, two tiles
#
# FIXME/TODO: move this into the DoHGoodies lib e.g. doh_test_boot_std() will initialize a simple standard test world.
# **********************

crashed() if cth_cleos(qq|push action clock.${doh_target} useclock '{}' -p clock.${doh_target}|);

# This takes care of also initializing energy.tc? and rep.tc? with the period_reset_mode set to true (the correct value for these).
crashed() if cth_cleos(qq|push action staking.${tcn_target} init '{ "distrib_contracts": [ "energy.${tcn_target}", "rep.${tcn_target}"], "drip_contracts": [ "main.${tcn_target}", "players.${tcn_target}"] }' --unpack-action-data -p staking.${tcn_target}|);

## Already commented out
###cleos -u "$endpoint" --verbose push action hegemon.hg1 updaterng '{}' --force-unique -p hegemon.hg1 >> log 2>&1

crashed() if cth_cleos(qq|push action clock.${doh_target} sethash '{"hash":"092ba25b75b0ee1ac79c5a1aa1df28a5129cd8d15b878fdb50dc804fda79dbc7"}' --force-unique -p clock.${doh_target}|);

crashed() if cth_cleos(qq|push action main.${tcn_target} adddrip '{"symbol":"4,TCN", "contract":"tokens.${tcn_target}", "buckets":["players.${tcn_target}"], "shares":[10000]}' --force-unique -p main.${tcn_target}\@active|);
crashed() if cth_cleos(qq|push action players.${tcn_target} adddrip '{"symbol":"4,TCN", "contract":"tokens.${tcn_target}", "buckets":["energy.${tcn_target}","rep.${tcn_target}"], "shares":[7000, 3000]}' --force-unique -p players.${tcn_target}\@active|);

crashed() if cth_cleos(qq|push action tokens.${tcn_target} create '{"issuer":"hegemon.${doh_target}", "maximum_supply":"100000000000.0000 TCN"}' -p tokens.${tcn_target}\@active|);
crashed() if cth_cleos(qq|push action tokens.${tcn_target} issue '{"to":"hegemon.${doh_target}", "quantity":"100000000.0000 TCN", "memo":"initial issuance"}' -p hegemon.${doh_target}\@active|);
crashed() if cth_cleos(qq|transfer hegemon.${doh_target} reserve.${tcn_target} "100000000.0000 TCN" "" --contract tokens.${tcn_target} -p hegemon.${doh_target}\@active|);

crashed() if cth_cleos(qq|push action hegemon.${doh_target} setgm '{"player":"$gmplayer"}' -p hegemon.${doh_target}|);

crashed() if cth_cleos(qq|push action hegemon.${doh_target} addfaction '{"id":1, "global_entity_id":52, "name":"Empire", "code":"em", "flag_asset_url":"/factions-flags/flag-empire.jpg"}' -p hegemon.${doh_target}|);
crashed() if cth_cleos(qq|push action hegemon.${doh_target} addfaction '{"id":2, "global_entity_id":53, "name":"Confederacy", "code":"co", "flag_asset_url":"/factions-flags/flag-confederacy.jpg"}' -p hegemon.${doh_target}|);
crashed() if cth_cleos(qq|push action hegemon.${doh_target} addfaction '{"id":3, "global_entity_id":54, "name":"Alliance", "code":"al", "flag_asset_url":"/factions-flags/flag-alliance.jpg"}' -p hegemon.${doh_target}|);
crashed() if cth_cleos(qq|push action hegemon.${doh_target} addfaction '{"id":4, "global_entity_id":55, "name":"Dominion", "code":"do", "flag_asset_url":"/factions-flags/flag-dominion.jpg"}' -p hegemon.${doh_target}|);

crashed() if cth_cleos(qq|push action crafting.${doh_target} addeffect '{"id":8, "name":"Plains", "description":"Farming production output increased by 50%. Mining production output decreased by 50%", "modifiers":[{ "modified_stat" : 3, "modifier_operator": 1, "condition": { "target":2, "filter":null, "value": 3 }, "value": 50 }, { "modified_stat" : 3, "modifier_operator": 1, "condition": { "target":2, "filter":null, "value": 1 }, "value": -50 }], "duration":-1 }' -p crafting.${doh_target}|);

crashed() if cth_cleos(qq|push action hegemon.${doh_target} addplanet '{"id":1, "area_map":"tulon","name":"Tulon", "code":"tu", "code":"tu", "asset_url":"/planets/tulon.png"}' -p hegemon.${doh_target}|);

crashed() if cth_cleos(qq|push action hegemon.${doh_target} addregion '{"id":1, "area_map":"tulon","name":"Nefari", "code":"ne"}' -p hegemon.${doh_target}|);

crashed() if cth_cleos(qq|push action hegemon.${doh_target} addterrain '{"id":1, "type":"Plains", "map_asset_url":"/tiles/tile-plains.jpg", "background_asset_url":"/character-backgrounds/character-background-plains.png", "building_slots":6, "effects":[8]}' -p hegemon.${doh_target}|);

crashed() if cth_cleos(qq|push action hegemon.${doh_target} addtile '{"id":1,"area_map":"tulon","region_id":1,"q_coord":0,"r_coord":0,"terrain_type":1}' -p hegemon.${doh_target}|);
crashed() if cth_cleos(qq|push action hegemon.${doh_target} addtile '{"id":2,"area_map":"tulon","region_id":1,"q_coord":0,"r_coord":1,"terrain_type":1}' -p hegemon.${doh_target}|);

crashed() if cth_cleos(qq|push action staking.${tcn_target} enable '{}' -p staking.${tcn_target}|);

# **********************
# Create players and 1 char for each player
# Also does some init stuff
# **********************

# Create all test player accounts: dohplayer.aa , dohplayer.ab , dohplayer.ac   etc.
@players = cth_generate_account_names('dohplayer.', 'aa', $doh_max_players);

my $char1    = 1;
my $player1  = 'dohplayer.aa';

my $player_id = 0;

foreach my $player (@players) {

    # push a character name for this player
    $player_id++;
    crashed() if cth_cleos(qq|push action names.${doh_target} addcname '{"id":1, "first_name":"Jimmy", "middle_name":"$player", "last_name":"Page", "asset_url":"/characters/character-jimmy-page-neutral.png"}' -p names.${doh_target}|);

    # create account
    crashed() if cth_cleos(qq|system newaccount eosio $player EOS6MRyAjQq8ud7hVNYcfnVPJqcVpscN5So8BhtHuGYqET5GDW5CV --stake-cpu "10000.0000 EOS" --stake-net "10000.0000 EOS" --buy-ram-kbytes 1000 --transfer|);

    # setup dejavu
    crashed() if cth_cleos(qq|push action dejavu.${doh_target} setplayer '{"p":{"owner":"$player", "asset_url":"/players/empire/player-empire-01.png", "count":0, "reputation":0, "faction_id":1, "location_tile_id":1}}' -p hegemon.${doh_target}|);

    # regplayer
    crashed() if cth_cleos(qq|push action hegemon.${doh_target} regplayer '{"player":"$player", "opt_out_of_politics":0}' --force-unique -p $player|);

    # create this player's char
    crashed() if cth_cleos(qq|push action hegemon.${doh_target} createchar '{"player":"$player"}' --force-unique -p $player|);
}

# **********************
# Benchmark the energy uses of the activities weso it will be using
# which tells us the numerator (spent energy --> TCN inflation) increases per player
# **********************

print "Will calculate the energy expenditure of in-game actions.\n";

# For now, work will be sufficient for this test.
# Let's not write complicated tests before we have decent test libraries.

print "Calculating cost of work action...\n";

my $e1 = doh_get_char_energy($char1);
crashed() if ($e1 < 0);

print "Char $char1 energy before work: $e1\n";

crashed() if cth_cleos(qq|push action hegemon.${doh_target} dowork '[$char1, $FARM]' --force-unique -p $player1|);
$total_work++;

my $e2 = doh_get_char_energy($char1);
crashed() if ($e2 < 0);

print "Char $char1 energy after work: $e2\n";

$energy_cost_work = $e1 - $e2;

print "Energy cost of work is: $energy_cost_work\n";

# **********************
# The test logic is run once.
# Distribution id == 0 is a dummy that never gets gc'd or used.
# Distribution id == 1 is the first one that actually gets distributed.
# **********************

print "Running test logic.\n";

# -----------------------------------------------------------------------------------------
# Work players for day 1 and assert numerators are correct
# -----------------------------------------------------------------------------------------

print "Working players for day 1...\n";

do_player_work(1);

# -----------------------------------------------------------------------------------------
# Check the distribution object at the end of the first day
# -----------------------------------------------------------------------------------------

$dist = cth_cleos_pipe(qq*get table energy.${tcn_target} energy.${tcn_target} distribs*);

crashed() if (! defined $dist);

print "Distribs at the end of first day looks like this:\n$dist\n";

# -----------------------------------------------------------------------------------------
# Advance clock for the first time (the day the characters are alive and did work)
# -----------------------------------------------------------------------------------------

print "Concluding first day and checking inflation and numerators are positive/correct.\n";

run_endday_and_test(1, 1);  # day 1, and "1" (true) if work was done

# -----------------------------------------------------------------------------------------
# Check the distribution object again at the beginning of the second day
# -----------------------------------------------------------------------------------------

$dist = cth_cleos_pipe(qq*get table energy.${tcn_target} energy.${tcn_target} distribs*);

crashed() if (! defined $dist);

print "Distribs at the beginning of the second day looks like this:\n$dist\n";

# -----------------------------------------------------------------------------------------
# Ok, so it seems that the work in the first day only generates inflation.
# We need to work on the second day to dispute the to_distribute of the new distribution
#    that is generated at the beginning of the second day with the inflation of the first.
# -----------------------------------------------------------------------------------------

print "Working players for day 2...\n";

do_player_work(2);

# -----------------------------------------------------------------------------------------
# Check the distribution object at the end of second day
# -----------------------------------------------------------------------------------------

$dist = cth_cleos_pipe(qq*get table energy.${tcn_target} energy.${tcn_target} distribs*);

crashed() if (! defined $dist);

print "Distribs at the end of the second day looks like this:\n$dist\n";

# -----------------------------------------------------------------------------------------
# Finish second day and assert the same things as we did in the first day,
#   but this TCN will never be distributed
# -----------------------------------------------------------------------------------------

run_endday_and_test(2, 1);  # day 2, and "1" (true) if work was done

# -----------------------------------------------------------------------------------------
# Check the distribution table at the beginning of the third day
# -----------------------------------------------------------------------------------------

$dist = cth_cleos_pipe(qq*get table energy.${tcn_target} energy.${tcn_target} distribs*);

crashed() if (! defined $dist);

print "Distribs at the beginning of the third day looks like this:\n$dist\n";

# -----------------------------------------------------------------------------------------
# Third day, no work
#
# TODO/REVIEW: I do not know exactly why we need to end the third day and go into the
#   fourth day to get TCN distributed. Is it the end of the cycle (3-day week in hg2/tc2)?
#   When and why distrib id==2 exists then? Confirm this.
# -----------------------------------------------------------------------------------------

run_endday_and_test(3, 0);  # day 3, and "0" (false) as no work done

$dist = cth_cleos_pipe(qq*get table energy.${tcn_target} energy.${tcn_target} distribs*);

crashed() if (! defined $dist);

print "No work done on day 3. Distribs at the beginning of the fourth day looks like this:\n$dist\n";

# -----------------------------------------------------------------------------------------
# Players make TCN/drip claims, except the last player
#
# This crashes if there is no TCN to claim, so if this passes, the TCN amounts
#   are positive and have to correspond to the player's numerators (work done).
# -----------------------------------------------------------------------------------------

print "We will do all claims for distribution id == 1 now (except for the last player).\n";

for (my $pid = 1; $pid <= $doh_max_players - 1; $pid++) {

    my $player_name = $players[ $pid - 1 ];

    print "Player $pid ('$player_name') will now claim their TCN.\n";
    crashed() if cth_cleos(qq|push action energy.${tcn_target} claim '[$player_name]' -p $player_name|);
}

# -----------------------------------------------------------------------------------------
# Check the distribution table at the beginning of the third day
# -----------------------------------------------------------------------------------------

$dist = cth_cleos_pipe(qq*get table energy.${tcn_target} energy.${tcn_target} distribs*);

crashed() if (! defined $dist);

print "Distribs at the beginning of the third day, after all claims made EXCEPT FOR THE LAST PLAYER, looks like this:\n$dist\n";

# On distribution id==1 (which seems to be the first that is actually claimable since id==0 does not
#   seem to ever get any TCN on it so it is never claimed and thus never gc'd)
# ...
#   check that stakers_count - stakers_claimed == 1 (the player who didn't claim)
#   check that distributed is nonzero

print "Checking that the distribution has the pending claim of the last player...\n";

# check that the second row of the distribs table is distribution id==1 (i.e. not gc'd yet) (will use jq so query the table again, doesn't cost us anything)

{
    my $row2id = cth_cleos_pipe(qq*get table energy.${tcn_target} energy.${tcn_target} distribs | jq .rows[1].id*);
    chomp($row2id);

    crashed() if (! defined $row2id); # has to be defined

    failed() if cth_assert("id of second distribution returned is 1 (it was not completed and thus not gc'd yet)", "$row2id == 1");
}

# get the distribution amount for distribution id==1 (will use jq so query the table again, doesn't cost us anything)

my $todistrib = cth_cleos_pipe(qq*get table energy.${tcn_target} energy.${tcn_target} distribs | jq .rows[1].to_distribute*);
crashed() if (! defined $todistrib);
$todistrib = doh_extract_tcn_amount($todistrib);
crashed() if ($todistrib < 0);

print "To distribute: $todistrib\n";

failed() if cth_assert("To distribute is greater than zero", "$todistrib > 0");

# -----------------------------------------------------------------------------------------
# Execute last claim and verify that distribution id==1 is gone (gc'd)
# -----------------------------------------------------------------------------------------

{
    my $pid = $doh_max_players;

    my $player_name = $players[ $pid - 1 ];

    print "Player $pid ('$player_name') will now claim their TCN (LAST PLAYER!).\n";
    crashed() if cth_cleos(qq|push action energy.${tcn_target} claim '[$player_name]' -p $player_name|);
}

$dist = cth_cleos_pipe(qq*get table energy.${tcn_target} energy.${tcn_target} distribs*);

crashed() if (! defined $dist);

print "Distribs at the beginning of the third day, after ALL claims made (INCLUDING LAST PLAYER), looks like this:\n$dist\n";

# get the id at the second row (will use jq so query the table again, doesn't cost us anything)

{
    my $row2id = cth_cleos_pipe(qq*get table energy.${tcn_target} energy.${tcn_target} distribs | jq .rows[1].id*);
    chomp($row2id);

    crashed() if (! defined $row2id); # has to be defined, since that will be id==2 (the distribution that is pipelined for distribution the *next* day)

    failed() if cth_assert("id of second distribution returned is not 1 (it was completed and gc'd)", "$row2id != 1");
}

# -----------------------------------------------------------------------------------------
# Check that the TCN balance between all players is proportional to their work on the
#   previous day (it's always the same amount of work -- same formula).
# -----------------------------------------------------------------------------------------

my @balances;

for (my $pid = 1; $pid <= $doh_max_players; $pid++) {
    my $player_name = $players[ $pid - 1 ];
    my $bal = cth_cleos_pipe(qq*get table tokens.${tcn_target} $player_name accounts | jq .rows[0].balance | tr -d '"'*);
    print "Player $pid ('$player_name') balance: $bal\n";

    $bal = doh_extract_tcn_amount($bal);

    push @balances, $bal;
}

# check that the TCN amount is the same as the reference value (extracted from one range of players that
#   worked 1 to 5 times) -- except for the last player, which swipes the fund and has to test for >= instead of ==

# NOT the case; day 1 work is lost; it's day 2 work that counts
# player 1 is a garbage amount (must be same as 2)
#failed() if cth_assert("player 1 worked the same as player 2", "$balances[0] == $balances[1]");

# get reference values from players 1-5
my @ref_bals;
for (my $pid = 1; $pid <= 5; $pid++) {
    push @ref_bals, $balances[$pid - 1];
}

# check players 6 to 29 against the reference values
for (my $pid = 6; $pid <= $doh_max_players - 1; $pid++) {

    my $ref_bal_idx = ($pid - 1) % 5;

    my $times_worked = $ref_bal_idx + 1;

    my $expected_tcn = $ref_bals[$ref_bal_idx];

    my $bal_tcn = $balances[$pid - 1];

    failed() if cth_assert("player $pid worked $times_worked times, so TCN $bal_tcn is expected to be equal to $expected_tcn", "$bal_tcn == $expected_tcn"); 
}

# check last player is greater or equal to the expected reference (since it may have swiped a nonzero remainder of rewards)

{
    my $ref_bal_idx = ($doh_max_players - 1) % 5;

    my $expected_tcn = $ref_bals[$ref_bal_idx];

    my $bal_tcn = $balances[$doh_max_players - 1];
    
    failed() if cth_assert("last player $doh_max_players TCN $bal_tcn is greater or equal than reference $expected_tcn", "$bal_tcn >= $expected_tcn"); 
}

# --------------------------------------------------------------------------------------------
# Test done; default return value is zero (success).
# --------------------------------------------------------------------------------------------

cleanup();
