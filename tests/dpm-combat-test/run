#!/usr/bin/perl

# --------------------------------------------------------------------------------------------
# dpm-combat-test
#
# Test naming convention:
#   d  = DoH
#   pm = perma ("perma" blockchain driver strategy)
# --------------------------------------------------------------------------------------------
# This is the "perma" version of the combat-test.sh port to cth.
#
# The "perma" testing strategy works on a permament blockchain deployment (like the DoH
#   private testnet for the hg2/tc2 "dev" DoH target. It does not start and stop nodeos
#   instances, and instead just clears the remote contracts before running itself. The
#   setting up of the blockchain and contract code is left to an external party (i.e.
#   the blockchain deployment is "permanent").
#
# This test defaults to the hg1 target.
#
# TODO/REVIEW: This test is currently self-excluding for any target that is not hg1, since
#   clock setting doesn't work for hgm/prod, and hg2/dev is for g's use.
# --------------------------------------------------------------------------------------------

use strict;
use warnings;

# include the tools/cth-goodies library
use lib '../../tools/cth-goodies';
use CthGoodies;

# --------------------------------------------------------------------------------------------
# Example subs that will end up in the DoHGoodies library
# (FIXME/TODO -- make the library and use that instead of this)
# --------------------------------------------------------------------------------------------

sub get_tcn_target {
    my $hgm = shift;
    if (! defined $hgm) { die "ERROR: get_tcn_target: hgm is undefined\n"; }
    if ($hgm eq 'hgm') {
        return "tcn";
    } elsif ($hgm =~ /^hg\d$/) {
        return "tc" . substr($hgm, -1);
    } else {
        die "ERROR: Cannot infer tcn target for doh target: $hgm\n";
    }
}

# --------------------------------------------------------------------------------------------
# Parse command-line parameters.
#
# Give a list of expected switches and options to the CthGoodies standard parser.
#
# If the cleos_url switch is not specified, the test will just use the cleos default.
#
# If the target is specified, we use that specific target (hg1, hgm, etc.). If it is
#    not specified, it will default to hg2.
# --------------------------------------------------------------------------------------------

my $doh_target = "hg1";   # default to hg1, as hg2 is g's environment

my $tcn_target;

my $ret;

my ($switches, $options) = cth_standard_args_parser(

    # List of switches (--switchname switchvalue, or --switchname=switchvalue)
    #   that this particular test expects or knows about.
    # If the test receives any switch not listed here, the test fails. That
    #   means the test is not engineered towards the environment of the test run.

    "cleos_url target",

    # List of options (-o optionname=optionvalue, or --option optioname=optionvalue)
    #   that this particular test expects or knows about.
    # If the test receives any options not listed here, the argument parser will
    #   print a warning, but the test will continue. The option will just be
    #   ignored.

    ""

    );

#
# Set the target
#

if (exists $switches->{'target'}) {
    $doh_target = $switches->{'target'};
    print "Specific DoH target provided via --target test run switch: $doh_target\n";
} else {
    print "Using test's default DoH target: $doh_target\n";
}

if ($doh_target ne 'hg1') {
    print "SKIP: This test is self-excluding itself since target is not hg1.\n";
    cth_skip_test();
}

$tcn_target = get_tcn_target($doh_target);
print "TCN target set to: $tcn_target\n";

#
# Set the cleos URL
#

if (exists $switches->{'cleos_url'}) {
    print "Blockchain endpoint set to: " . $switches->{'cleos_url'} . "\n";

    $ret = cth_set_cleos_url( $switches->{'cleos_url'} );
    if ($ret) { die "ERROR: cth_set_cleos_url failed\n"; }
} else {
    print "Assuming default blockchain endpoint (https://127.0.0.1:8888)\n";
}

#
# Boot cleos driver (wallet)
#

$ret = cth_set_cleos_provider("cleos-driver");
if ($ret) { die "ERROR: cth_set_cleos_provider failed\n"; }

#
# Start the doh-perma driver (which should start cleos-driver)
#

$ret = cth_call_driver("doh-perma", "configure --target=" . $doh_target);
if ($ret) { die "ERROR: cth_call_driver failed\n"; }

if (defined $switches->{'cleos_url'}) {
    # This is optional; if we don't configure this, the driver will use the cleos default
    #   of https://127.0.0.1:8888.
    $ret = cth_call_driver("doh-perma", "configure --cleos_url=" . $switches->{'cleos_url'} );
    if ($ret) { die "ERROR: cth_call_driver failed\n"; }
}

# The only thing this does is reset the DoH contracts
$ret = cth_call_driver("doh-perma", "start");
if ($ret) { die "ERROR: cth_call_driver failed\n"; }

# --------------------------------------------------------------------------------------------
# We will shut down the driver and fail the test whenever a test step fails.
# --------------------------------------------------------------------------------------------

sub inform {
    my $what = shift;
    if (!defined $what) { $what = "doing something\n"; }
    print "INFO: Failed while '$what'.\n";
}

sub cleanup {
    print "cleanup(): Wiping off test-specific table scopes (e.g. test players' TCN balances)... This may fail if there are no entries (that's OK).\n";

    # Do NOT kill the test if these fail. Just report.

    inform("clearing dohplayer1") if cth_cleos(qq|push action tokens.${tcn_target} clear '{"account":"dohplayer1"}' -p tokens.${tcn_target}|);
    inform("clearing dohplayer2") if cth_cleos(qq|push action tokens.${tcn_target} clear '{"account":"dohplayer2"}' -p tokens.${tcn_target}|);
}

sub crashed {
    print "ERROR: Test has crashed.\n";
    cleanup();
    die;
}

sub failed {
    print "ERROR: Test has failed.\n";
    cleanup();
    die;
}

# --------------------------------------------------------------------------------------------
# Preventive cleanup of test players' state (expected to fail since test players should
#   not exist at this point).
# --------------------------------------------------------------------------------------------

cleanup();

# --------------------------------------------------------------------------------------------
# Test logic here
# --------------------------------------------------------------------------------------------

my $expected;
my $actual;

crashed() if cth_cleos(qq|push action clock.${doh_target} useclock '{}' -p clock.${doh_target}|);

crashed() if cth_cleos(qq|push action staking.${tcn_target} init '{ "distrib_contracts": [ "energy.${tcn_target}", "rep.${tcn_target}"], "drip_contracts": [ "main.${tcn_target}", "players.${tcn_target}"] }' -p staking.${tcn_target}|);

# Commented-out on combat-test.sh
#crashed() if cth_cleos(qq|push action hegemon.${doh_target} updaterng '{}' --force-unique -p hegemon.${doh_target}|);

crashed() if cth_cleos(qq|push action clock.${doh_target} sethash '{"hash":"092ba25b75b0ee1ac79c5a1aa1df28a5129cd8d15b878fdb50dc804fda79dbc7"}' --force-unique -p clock.${doh_target}|);

crashed() if cth_cleos(qq|push action dejavu.${doh_target} setplayer '{"p":{"owner":"dohplayer1", "asset_url":"/players/dominion/player-confederacy-01.png", "count":0, "reputation":0, "faction_id":2, "location_tile_id":1}}' -p hegemon.${doh_target}|);
crashed() if cth_cleos(qq|push action dejavu.${doh_target} setplayer '{"p":{"owner":"dohplayer2", "asset_url":"/players/dominion/player-dominion-02.png", "count":0, "reputation":0, "faction_id":4, "location_tile_id":1}}' -p hegemon.${doh_target}|);

crashed() if cth_cleos(qq|push action names.${doh_target} addcname '{"id":1, "first_name":"Jimmy", "middle_name":"", "last_name":"Page", "asset_url":"/characters/character-jimmy-page-neutral.png"}' -p names.${doh_target}|);
crashed() if cth_cleos(qq|push action names.${doh_target} addcname '{"id":2, "first_name":"Robert", "middle_name":"", "last_name":"Plant", "asset_url":"/characters/character-robert-plant-neutral.png"}' -p names.${doh_target}|);
crashed() if cth_cleos(qq|push action names.${doh_target} addcname '{"id":3, "first_name":"Jimi", "middle_name":"", "last_name":"Hendrix", "asset_url":"/characters/character-jimi-hendrix-neutral.png"}' -p names.${doh_target}|);

crashed() if cth_cleos(qq|push action hegemon.${doh_target} setgm '{"player":"dohplayer1"}' -p hegemon.${doh_target}|);

crashed() if cth_cleos(qq|push action hegemon.${doh_target} addfaction '{"id":1, "global_entity_id":52, "name":"Empire", "code":"em", "flag_asset_url":"/factions-flags/flag-empire.jpg"}' -p hegemon.${doh_target}|);
crashed() if cth_cleos(qq|push action hegemon.${doh_target} addfaction '{"id":2, "global_entity_id":53, "name":"Confederacy", "code":"co", "flag_asset_url":"/factions-flags/flag-confederacy.jpg"}' -p hegemon.${doh_target}|);
crashed() if cth_cleos(qq|push action hegemon.${doh_target} addfaction '{"id":3, "global_entity_id":54, "name":"Alliance", "code":"al", "flag_asset_url":"/factions-flags/flag-alliance.jpg"}' -p hegemon.${doh_target}|);
crashed() if cth_cleos(qq|push action hegemon.${doh_target} addfaction '{"id":4, "global_entity_id":55, "name":"Dominion", "code":"do", "flag_asset_url":"/factions-flags/flag-dominion.jpg"}' -p hegemon.${doh_target}|);

crashed() if cth_cleos(qq|push action crafting.${doh_target} addeffect '{"id":1, "name":"Plains", "description":"Farming production output increased by 50%. Mining production output decreased by 50%", "modifiers":[{ "modified_stat" : 3, "modifier_operator": 1, "condition": { "target":2, "filter":null, "value": 3 }, "value": 50 }, { "modified_stat" : 3, "modifier_operator": 1, "condition": { "target":2, "filter":null, "value": 1 }, "value": -50 }], "duration":-1 }' -p crafting.${doh_target} |);

crashed() if cth_cleos(qq|push action hegemon.${doh_target} addplanet '{"id":1, "area_map":"tulon","name":"Tulon", "code":"tu", "code":"tu", "asset_url":"/planets/tulon.png"}' -p hegemon.${doh_target}|);

crashed() if cth_cleos(qq|push action hegemon.${doh_target} addregion '{"id":1, "planet_id":1,"name":"Nefari", "code":"ne"}' -p hegemon.${doh_target}|);

crashed() if cth_cleos(qq|push action hegemon.${doh_target} addterrain '{"id":1, "type":"Plains", "map_asset_url":"/tiles/tile-plains.jpg",	"background_asset_url":"/character-backgrounds/character-background-plains.png", "building_slots":6, "effects":[1]}' -p hegemon.${doh_target}|);

crashed() if cth_cleos(qq|push action hegemon.${doh_target} addtile '{"id":1,"area_map":"tulon","region_id":1,"q_coord":0,"r_coord":0,"terrain_type":1}' -p hegemon.${doh_target}|);
crashed() if cth_cleos(qq|push action hegemon.${doh_target} addtile '{"id":2,"area_map":"tulon","region_id":1,"q_coord":0,"r_coord":1,"terrain_type":1}' -p hegemon.${doh_target}|);

crashed() if cth_cleos(qq|push action staking.${tcn_target} enable '{}' -p staking.${tcn_target}|);

crashed() if cth_cleos(qq|push action hegemon.${doh_target} regplayer '{"player":"dohplayer1", "opt_out_of_politics":false}' --force-unique -p dohplayer1|);
crashed() if cth_cleos(qq|push action hegemon.${doh_target} regplayer '{"player":"dohplayer2", "opt_out_of_politics":false}' --force-unique -p dohplayer2|);
crashed() if cth_cleos(qq|push action hegemon.${doh_target} createchar '{"player":"dohplayer1"}' --force-unique -p dohplayer1|);
crashed() if cth_cleos(qq|push action hegemon.${doh_target} createchar '{"player":"dohplayer1"}' --force-unique -p dohplayer1|);
crashed() if cth_cleos(qq|push action hegemon.${doh_target} createchar '{"player":"dohplayer2"}' --force-unique -p dohplayer2|);

crashed() if cth_cleos(qq|push action clock.${doh_target} clockaddsec '{"seconds":120}' --force-unique -p clock.${doh_target}|);
crashed() if cth_cleos(qq|push action hegemon.${doh_target} docombat '{"player":"dohplayer1", "faction_id":4}' --force-unique -p dohplayer1|);
crashed() if cth_cleos(qq|push action clock.${doh_target} clockaddsec '{"seconds":120}' --force-unique -p clock.${doh_target}|);
crashed() if cth_cleos(qq|push action hegemon.${doh_target} updaterng '{}' --force-unique -p hegemon.${doh_target}|);
crashed() if cth_cleos(qq|push action hegemon.${doh_target} resolverngs '{"count":0}' --force-unique -p hegemon.${doh_target}|);
crashed() if cth_cleos(qq|push action hegemon.${doh_target} proc '{"count":0}' --force-unique -p hegemon.${doh_target}|);

$expected = 9;

$actual = cth_cleos_pipe(qq*get table hegemon.${doh_target} hegemon.${doh_target} battleunits --lower 2 --limit 1 | jq .rows[0].hp*);

cth_assert("battle round 1 -> unit 2 hp == 9", "$expected == $actual");

crashed() if cth_cleos(qq|push action clock.${doh_target} clockaddsec '{"seconds":120}' --force-unique -p clock.${doh_target}|);

crashed() if cth_cleos(qq|push action hegemon.${doh_target} updaterng '{}' --force-unique  -p hegemon.${doh_target}|);
crashed() if cth_cleos(qq|push action hegemon.${doh_target} resolverngs '{"count":0}' --force-unique -p hegemon.${doh_target}|);
crashed() if cth_cleos(qq|push action hegemon.${doh_target} proc '{"count":0}' --force-unique -p hegemon.${doh_target}|);

$expected = 8;

$actual = cth_cleos_pipe(qq*get table hegemon.${doh_target} hegemon.${doh_target} battleunits --lower 2 --limit 1 | jq .rows[0].hp*);

cth_assert("battle round 2 -> unit 2 hp == 8", "$expected == $actual");

crashed() if cth_cleos(qq|push action hegemon.${doh_target} doretreat '{"player":"dohplayer1", "destination_tile_id":2}' --force-unique  -p dohplayer1 |);

crashed() if cth_cleos(qq|push action clock.${doh_target} sethash '{"hash":"092ba25b75b0ee1ac79c5a1aa1df28a5129cd8d15b878fdb50dc804fda79dbc2"}' --force-unique -p clock.${doh_target}|);

crashed() if cth_cleos(qq|push action clock.${doh_target} clockaddsec '{"seconds":120}' --force-unique -p clock.${doh_target}|);
crashed() if cth_cleos(qq|push action hegemon.${doh_target} updaterng '{}' --force-unique -p hegemon.${doh_target}|);
crashed() if cth_cleos(qq|push action hegemon.${doh_target} resolverngs '{"count":0}' --force-unique -p hegemon.${doh_target}|);
crashed() if cth_cleos(qq|push action hegemon.${doh_target} proc '{"count":0}' --force-unique -p hegemon.${doh_target}|);

$expected = 1;

$actual = cth_cleos_pipe(qq*get table hegemon.${doh_target} hegemon.${doh_target} players --lower dohplayer1 --limit 1 --index 2 --key-type i64 | jq .rows[0].location_tile_id*);

cth_assert("played dohplayer1 failed retreating : still on tile 1", "$expected == $actual");

crashed() if cth_cleos(qq|push action clock.${doh_target} sethash '{"hash":"092ba25b75b0ee1ac79c5a1aa1df28a5129cd8d15b878fdb50dc804fda79dbc5"}' --force-unique -p clock.${doh_target}|);

crashed() if cth_cleos(qq|push action clock.${doh_target} clockaddsec '{"seconds":120}' --force-unique -p clock.${doh_target}|);
crashed() if cth_cleos(qq|push action hegemon.${doh_target} updaterng '{}' --force-unique -p hegemon.${doh_target}|);
crashed() if cth_cleos(qq|push action hegemon.${doh_target} resolverngs '{"count":0}' --force-unique -p hegemon.${doh_target}|);

my $expected_checksum256 = '3786e2d0a8286823a1586b3996537d106e32779c8bf0d732c0c12a0d3e3611fd';

my $actual_checksum256 = cth_cleos_pipe(qq*push action hegemon.${doh_target} proc '{"count":0}' --force-unique -p hegemon.${doh_target} --json | jq .processed.action_traces[1].console | awk -F "checksum256:" '{print substr($NF, 1, 64)}'*);

$expected = 2;

$actual = cth_cleos_pipe(qq*get table hegemon.${doh_target} hegemon.${doh_target} players --lower dohplayer1 --limit 1 --index 2 --key-type i64 | jq .rows[0].location_tile_id*);

cth_assert("played dohplayer1 successfully retreated to tile 2 ", "$expected == $actual");

cth_assert("last derived hash is 3786e2d0a8286823a1586b3996537d106e32779c8bf0d732c0c12a0d3e3611fd", "$expected_checksum256 == $actual_checksum256");

# --------------------------------------------------------------------------------------------
# Default return value is zero (success).
# --------------------------------------------------------------------------------------------

cleanup();
