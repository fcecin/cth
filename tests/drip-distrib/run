#!/usr/bin/perl

# --------------------------------------------------------------------------------------------
# drip-distrib
# --------------------------------------------------------------------------------------------
# Test drip token distribution system.
# This test is a port of cryptomechanics/doh-unit-tests/drip-distrib.sh from August, 2023.
# --------------------------------------------------------------------------------------------

use strict;
use warnings;

# include paths assume this script is in the following directory depth: cth/<testdir>/<testscript>
use lib '../../tools/cth-goodies';
use CthGoodies;
use lib '../../tools/doh-goodies';
use DoHGoodies;

$| = 1;  # Turn on auto-flush for STDOUT (Perl doesn't do this by default)

# all tests should be hard-coded for the test (hg3/tc3) DoH compilation target.
my ($doh_target, $tcn_target) = ("hg3", "tc3");

# this test's DoH game master account
my $doh_gm = "dohplayer1";

# --------------------------------------------------------------------------------------------
# Set up the test
# --------------------------------------------------------------------------------------------

print "TEST: starting setup...\n";

my $ret = doh_init($doh_target, $doh_gm);
if ($ret) { die "ERROR: TEST: doh_init failed\n"; }

my $instance_port = doh_hotstart_start($doh_target);
if ($instance_port < 0) { die "ERROR: TEST: doh_hotstart_start failed code: $instance_port\n"; }

print "TEST: setup OK.\n";

# --------------------------------------------------------------------------------------------
# Test helper functions
# --------------------------------------------------------------------------------------------

sub cleanup {
    print "TEST: starting cleanup...\n";
    my $ret = doh_hotstart_clear($instance_port);
    if ($ret) { die "ERROR: TEST: doh_hostart_clear failed\n"; }
    print "TEST: cleanup OK.\n";
}
sub crashed { print "ERROR: TEST: testcase has crashed.\n"; cleanup(); die; }
sub failed { print "ERROR: TEST: testcase has failed.\n"; cleanup(); die; }

# --------------------------------------------------------------------------------------------
# Testcase
# --------------------------------------------------------------------------------------------

print "TEST: testcase started.\n";

# **********************
# Create test player accounts
# **********************

crashed() if cth_cleos(qq|system newaccount eosio dohplayer1 EOS6MRyAjQq8ud7hVNYcfnVPJqcVpscN5So8BhtHuGYqET5GDW5CV --stake-cpu "10000.0000 EOS" --stake-net "10000.0000 EOS" --buy-ram-kbytes 1000 --transfer|);

crashed() if cth_cleos(qq|system newaccount eosio dohplayer2 EOS6MRyAjQq8ud7hVNYcfnVPJqcVpscN5So8BhtHuGYqET5GDW5CV --stake-cpu "10000.0000 EOS" --stake-net "10000.0000 EOS" --buy-ram-kbytes 1000 --transfer|);

# **********************
# Port of doh-unit-tests/drip-distrib.sh
# (first part -- everything before the first "exit 0;")
# **********************

my $expected;
my $actual;

crashed() if cth_cleos(qq|push action clock.${doh_target} useclock '{}' -p clock.${doh_target}|);

crashed() if cth_cleos(qq|push action staking.${tcn_target} init '{ "epoch":"1", "distrib_contracts": [ "energy.${tcn_target}", "rep.${tcn_target}"], "drip_contracts": [ "main.${tcn_target}", "players.${tcn_target}"] }' -p staking.${tcn_target}|);

## Already commented out
###cleos -u "$endpoint" --verbose push action hegemon.hg1 updaterng '{}' --force-unique -p hegemon.hg1 >> log 2>&1

crashed() if cth_cleos(qq|push action clock.${doh_target} sethash '{"hash":"092ba25b75b0ee1ac79c5a1aa1df28a5129cd8d15b878fdb50dc804fda79dbc7"}' --force-unique -p clock.${doh_target}|);

crashed() if cth_cleos(qq|push action main.${tcn_target} adddrip '{"symbol":"4,TCN", "contract":"tokens.${tcn_target}", "buckets":["players.${tcn_target}"], "shares":[10000]}' --force-unique -p main.${tcn_target}\@active|);
crashed() if cth_cleos(qq|push action players.${tcn_target} adddrip '{"symbol":"4,TCN", "contract":"tokens.${tcn_target}", "buckets":["energy.${tcn_target}","rep.${tcn_target}"], "shares":[7000, 3000]}' --force-unique -p players.${tcn_target}\@active|);

crashed() if cth_cleos(qq|push action dejavu.${doh_target} setplayer '{"p":{"owner":"dohplayer1", "asset_url":"/players/dominion/player-confederacy-01.png", "count":0, "reputation":0, "faction_id":2, "location_tile_id":1}}' -p hegemon.${doh_target}|);
crashed() if cth_cleos(qq|push action dejavu.${doh_target} setplayer '{"p":{"owner":"dohplayer2", "asset_url":"/players/dominion/player-dominion-02.png", "count":0, "reputation":0, "faction_id":4, "location_tile_id":1}}' -p hegemon.${doh_target}|);

crashed() if cth_cleos(qq|push action names.${doh_target} addcname '{"id":1, "first_name":"Jimmy", "middle_name":"", "last_name":"Page", "asset_url":"/characters/character-jimmy-page-neutral.png", "faction_id":2}' -p names.${doh_target}|);
crashed() if cth_cleos(qq|push action names.${doh_target} addcname '{"id":2, "first_name":"Robert", "middle_name":"", "last_name":"Plant", "asset_url":"/characters/character-robert-plant-neutral.png", "faction_id":2}' -p names.${doh_target}|);
crashed() if cth_cleos(qq|push action names.${doh_target} addcname '{"id":3, "first_name":"Jimi", "middle_name":"", "last_name":"Hendrix", "asset_url":"/characters/character-jimi-hendrix-neutral.png", "faction_id":4}' -p names.${doh_target}|);

crashed() if cth_cleos(qq|push action tokens.${tcn_target} create '{"issuer":"hegemon.${doh_target}", "maximum_supply":"100000000000.0000 TCN"}' -p tokens.${tcn_target}\@active|);
crashed() if cth_cleos(qq|push action tokens.${tcn_target} issue '{"to":"hegemon.${doh_target}", "quantity":"100000000.0000 TCN", "memo":"initial issuance"}' -p hegemon.${doh_target}\@active|);
crashed() if cth_cleos(qq|transfer hegemon.${doh_target} reserve.${tcn_target} "100000000.0000 TCN" "" --contract tokens.${tcn_target} -p hegemon.${doh_target}\@active|);

crashed() if cth_cleos(qq|push action hegemon.${doh_target} setgm '{"player":"$doh_gm"}' -p hegemon.${doh_target}|);

crashed() if cth_cleos(qq|push action hegemon.${doh_target} addfaction '{"id":1, "global_entity_id":52, "name":"Empire", "code":"em", "flag_asset_url":"/factions-flags/flag-empire.jpg"}' -p hegemon.${doh_target}|);
crashed() if cth_cleos(qq|push action hegemon.${doh_target} addfaction '{"id":2, "global_entity_id":53, "name":"Confederacy", "code":"co", "flag_asset_url":"/factions-flags/flag-confederacy.jpg"}' -p hegemon.${doh_target}|);
crashed() if cth_cleos(qq|push action hegemon.${doh_target} addfaction '{"id":3, "global_entity_id":54, "name":"Alliance", "code":"al", "flag_asset_url":"/factions-flags/flag-alliance.jpg"}' -p hegemon.${doh_target}|);
crashed() if cth_cleos(qq|push action hegemon.${doh_target} addfaction '{"id":4, "global_entity_id":55, "name":"Dominion", "code":"do", "flag_asset_url":"/factions-flags/flag-dominion.jpg"}' -p hegemon.${doh_target}|);

crashed() if cth_cleos(qq|push action crafting.${doh_target} addeffect '{"id":1, "name":"Plains", "description":"Farming production output increased by 50%. Mining production output decreased by 50%", "modifiers":[{ "modified_stat" : 3, "modifier_operator": 1, "condition": { "target":2, "filter":null, "value": 3 }, "value": 50 }, { "modified_stat" : 3, "modifier_operator": 1, "condition": { "target":2, "filter":null, "value": 1 }, "value": -50 }], "duration":-1 }' -p crafting.${doh_target}|);

my $o = cth_cleos_pipe(qq*get table crafting.${doh_target} crafting.${doh_target} effects*);
crashed() if (!defined $o);

crashed() if cth_cleos(qq|push action hegemon.${doh_target} addplanet '{"id":1, "area_map":"tulon", "q_coord":0, "r_coord":0, "name":"Tulon", "code":"tu", "asset_url":"/planets/tulon.png", "r_color":255, "g_color":255, "b_color":255}' -p hegemon.${doh_target}|);

crashed() if cth_cleos(qq|push action hegemon.${doh_target} addregion '{"id":1, "area_map":"tulon", "name":"Nefari", "code":"ne"}' -p hegemon.${doh_target}|);

crashed() if cth_cleos(qq|push action hegemon.${doh_target} addterrain '{"id":1, "type":"Plains", "map_asset_urls":["/tiles/tile-plains.jpg"], "background_asset_url":"/character-backgrounds/character-background-plains.png", "building_slots":6, "effects":[1]}' -p hegemon.${doh_target}|);

crashed() if cth_cleos(qq|push action hegemon.${doh_target} addtile '{"id":1,"area_map":"tulon","region_id":1,"q_coord":0,"r_coord":0,"terrain_type":1}' -p hegemon.${doh_target}|);
crashed() if cth_cleos(qq|push action hegemon.${doh_target} addtile '{"id":2,"area_map":"tulon","region_id":1,"q_coord":0,"r_coord":1,"terrain_type":1}' -p hegemon.${doh_target}|);

crashed() if cth_cleos(qq|push action staking.${tcn_target} enable '{}' -p staking.${tcn_target}|);

crashed() if cth_cleos(qq|push action hegemon.${doh_target} regplayer '{"player":"dohplayer1", "opt_out_of_politics":false}' --force-unique -p dohplayer1|);
crashed() if cth_cleos(qq|push action hegemon.${doh_target} regplayer '{"player":"dohplayer2", "opt_out_of_politics":false}' --force-unique -p dohplayer2|);
crashed() if cth_cleos(qq|push action hegemon.${doh_target} createchar '{"player":"dohplayer1"}' --force-unique -p dohplayer1|);
crashed() if cth_cleos(qq|push action hegemon.${doh_target} createchar '{"player":"dohplayer1"}' --force-unique -p dohplayer1|);
crashed() if cth_cleos(qq|push action hegemon.${doh_target} createchar '{"player":"dohplayer2"}' --force-unique -p dohplayer2|);

crashed() if cth_cleos(qq|push action crafting.${doh_target} addgameasset '{"id":3, "name":"Food", "asset_url":"/items/food/food-neutral.png", "type":0, "category":"resource", "level":1, "rarity":0, "item_data":null}' --force-unique -p crafting.${doh_target}|);

crashed() if cth_cleos(qq|push action hegemon.${doh_target} dowork '{"character_id":1, "activity":3}' --force-unique -p dohplayer1|);

my $some_date_string = cth_cleos_pipe(qq*get table hegemon.${doh_target} hegemon.${doh_target} global | jq .rows[0].day_stats.day_start | tr -d '"'*);

crashed() if (!defined $some_date_string);

crashed() if cth_cleos(qq|push action clock.${doh_target} clockaddsec '{"seconds":120}' --force-unique -p clock.${doh_target}|);

crashed() if cth_cleos(qq|push action hegemon.${doh_target} updaterng '{}' --force-unique -p hegemon.${doh_target}|);
crashed() if cth_cleos(qq|push action hegemon.${doh_target} resolverngs '{"count":0}' --force-unique -p hegemon.${doh_target}|);
crashed() if cth_cleos(qq|push action hegemon.${doh_target} proc '{"count":0}' --force-unique -p hegemon.${doh_target}|);

## Already commented out
###cleos -u "$endpoint" --verbose push action hegemon.hg1 endday '{}' --force-unique -p hegemon.hg1 --json >> log 2>&1

$expected = 10039;

$actual = cth_cleos_pipe(qq*push action hegemon.${doh_target} endday '{}' --force-unique -p hegemon.${doh_target} --json | jq .processed.action_traces[1].except.stack[0].data.error_code*);

crashed() if (!defined $actual);

cth_assert("day not over yet", "$expected == $actual");

# Day is not 1200 in hg3 apparently but 300, so 300-120 = 180 seconds to close the day
#crashed() if cth_cleos(qq|push action clock.${doh_target} clockaddsec '{"seconds":1080}' --force-unique -p clock.${doh_target}|);
crashed() if cth_cleos(qq|push action clock.${doh_target} clockaddsec '{"seconds":180}' --force-unique -p clock.${doh_target}|);

crashed() if cth_cleos(qq|push action hegemon.${doh_target} endday '{}' --force-unique -p hegemon.${doh_target}|);

my $date_string = cth_cleos_pipe(qq*get table hegemon.${doh_target} hegemon.${doh_target} global | jq .rows[0].day_stats.day_start | tr -d '"'*);

crashed() if (!defined $date_string);

# Day is 300s in hg3
#$expected = 1200;
$expected = 300;

$actual = qx(TZ=UTC date -d "$date_string" +"%s"); 

failed() if cth_assert("unix timestamp for day_start is $expected", "$expected == $actual");

$expected = "191.7789";

$actual = cth_cleos_pipe(qq*get table tokens.${tcn_target} energy.${tcn_target} accounts | jq .rows[0].balance | tr -d '"' | tr -d 'TCN'*);

crashed() if (!defined $actual);

failed() if cth_assert("energy.${tcn_target} balance is 191.7789 TCN", "$expected == $actual");

$expected = "82.1911";

$actual = cth_cleos_pipe(qq*get table tokens.${tcn_target} rep.${tcn_target} accounts | jq .rows[0].balance | tr -d '"' | tr -d 'TCN'*);

crashed() if (!defined $actual);

failed() if cth_assert("rep.${tcn_target} balance is 82.1911 TCN", "$expected == $actual");

# --------------------------------------------------------------------------------------------
# Test done
# --------------------------------------------------------------------------------------------

cleanup();

print "TEST: completed successfully.\n";
