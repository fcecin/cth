#!/usr/bin/env node

// --------------------------------------------------------------------------------------------
// gvm: playing with C++ templates + contract tables
// --------------------------------------------------------------------------------------------

require('DoHTestLib');

// --------------------------------------------------------------------------------------------
// Compile
// --------------------------------------------------------------------------------------------

const childProcess = require('child_process');

// compile your contract
childProcess.execSync('cdt-cpp gvm.cpp --abigen --no-missing-ricardian-clause');

// --------------------------------------------------------------------------------------------
// Init
// --------------------------------------------------------------------------------------------

// args don't matter; just don't change them
fixtureInit("foobar", "hg3", "tc3");

// create the account for your contract
cleos('system newaccount eosio gvm EOS6MRyAjQq8ud7hVNYcfnVPJqcVpscN5So8BhtHuGYqET5GDW5CV --stake-cpu "10000.0000 EOS" --stake-net "10000.0000 EOS" --buy-ram-kbytes 10000 --transfer');

// set the contract
cleos('set contract gvm . -p gvm');

// get an object to interact with it
gvm = getProxyForContract(`gvm`);

// --------------------------------------------------------------------------------------------
// Test
// --------------------------------------------------------------------------------------------

gvm._logon();

// Table #0: users
gvm.createuser("usera", 10000);
gvm.createuser("userb", 20000);
gvm.createuser("userc", 30000);
gvm.createuser("userd", 40000);
gvm.createuser("usere", 50000);

// Table #1: transactions
gvm.maketrans("usera", "userb", 100);
gvm.maketrans("usera", "userc", 200);
gvm.maketrans("usera", "userd", 300);
gvm.maketrans("usera", "usere", 400);

// VM calls INLINE ACTIONS! the inline actions do the magic!
// the VM has access to HOST FUNCTIONS basically!
//hardcoded method name: gvm_host() -- what to do is in registers!!!
//
// 1 opcode call C++ method
// one of the consequences is inline actions
// code loading / start another VM
// etc.
// the VM itself is transparent and plain and has no craziness in it
// let's try it that way



// dump resulting tables
console.log( "Table 0:\n" + JSON.stringify( gvm.users().rows, null, 2) );
console.log( "Table 1:\n" + JSON.stringify( gvm.transactions().rows, null, 2) );

// --------------------------------------------------------------------------------------------
// Done
// --------------------------------------------------------------------------------------------

// just call this at the end
fixtureFinish();
