#!/usr/bin/env node

// --------------------------------------------------------------------------------------------
// meta-test
// --------------------------------------------------------------------------------------------
// Test various functions of the metagame contract.
//
// This test is an example of a cth/DoH test that contains multiple "fixture tests", which are
//   a collection of actual test routines performed by this cth/DoH testcase file/directory.
//
// The idea is that there's a single table, bench, or "fixture" where you place a routine to
//   be tested, and when you are done with that, you remove that routine, optionally perform a
//   fixtureCleanup.js routine, and then place the next routine to be tested in the fixture.
//   We'll be calling those test routines "fixture tests" to disambiguate from "tests", which
//   are the "run" files (this file) and the directory they are in, which is the test's
//   directory (which names the top-level cth/DoH testcase to the harness).
//
// After all the fixture tests are run, if everything went well, then fixtureFinish() will
//   call fixturePrintSummary() internally to present a tally of how many fixture tests
//   passed and how many failed. If anything fails anywhere, the whole testcase fails.
//
// NOTE:
//
// fixtureRun() uses vm.runInThisContext(), which has no access to let/const variables
//   declared outside of the script to be run, so we need to use global variables to access
//   these from the fixture tests.
// As a rule of thumb, any variable that's going to be accessed by more than one test file
//   is going to be a global variable (including all of DoHTestLib's exported functions
//   and variables). This should not be a problem unless people are trying to create
//   test functions/variables that are named e.g. "init", "cleos", "CONTRACT", etc.
//   (I guess we could create a global object named 'test' and put everything into *that*,
//    but i'd rather use the shorter names for writing tests and instead be creative when
//    naming test variables/functions...)
// --------------------------------------------------------------------------------------------

// This is the recommended way to pull in the entire test library.
// Everything is dumped in the global object.
require('DoHTestLib');

// --------------------------------------------------------------------------------------------
// Init
// --------------------------------------------------------------------------------------------

fixtureInit("dohplayer1", "hg3", "tc3");

createBasicGame();
createBasicPlayers();
createBasicEconomy();

tokens = getProxyForContract(`tokens.${tcn_target}`);
meta = getProxyForContract(`meta.${doh_target}`);
clock = getProxyForContract(`clock.${doh_target}`);

// --------------------------------------------------------------------------------------------
// Tests run inside the test fixture (fixture tests)
// --------------------------------------------------------------------------------------------

fixtureRun("metaBoot.js");

fixtureRun("metaStake.js");

fixtureRun("metaBuy.js");

fixtureRun("metaTransfer.js");

fixtureRun("metaDutch.js");

fixtureRun("metaWaitlist.js");

fixtureRun("metaBid.js");

fixtureRun("metaInvite.js");

/*

  TODO:


fixtureRun("metaFinal.js");

*/

// --------------------------------------------------------------------------------------------
// Done
// --------------------------------------------------------------------------------------------

fixtureFinish();


/*
      //admin actions

      ACTION setplayer(const player& p);
      ACTION setauction(const auction& a);
      ACTION setplanet(const planet& p);
      ACTION setregion(const region& r);
      ACTION setfaction(const faction& f);
      ACTION setitem(const item& i);

      ACTION init(const time_point& all_auctions_end, const time_point& meta_game_end); //initialize and start the meta game

      ACTION unstakeall();

      //player actions

      ACTION open( const name& player, const symbol& symbol, const name& ram_payer );
      ACTION close( const name& player, const symbol& symbol );

      ACTION dostake(const name& owner, const asset& amount, const uint64_t region_id);

      ACTION placebid(const name& owner, const asset& amount, const uint64_t auction_id);

      ACTION purchase(const name& owner, const uint64_t item_id);

      ACTION transfer(const uint64_t acquisition_id, const name& to);

      ACTION invite(const name& inviter, const name& invitee); //invite invitee to join inviter's faction

      ACTION reqinvite(const name& invitee, const asset& bid, const uint64_t faction_id); //request a faction invite to a faction, offering an optional bid

      ACTION acceptinvite(const name& inviter, const name& invitee);

      ACTION cancelinv(const name& inviter, const name& invitee);
      ACTION cancelallinv(const name& inviter);
      ACTION cancelreq(const name& owner);

      ACTION withdraw(const name& owner, const asset& amount);

      ACTION update(const uint32_t count);

      //clear action

      ACTION clear();

*/
