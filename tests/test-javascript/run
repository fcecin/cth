#!/usr/bin/env node

// ---------------------------------------------------------------------------------------
// This file is just a lab that I'm using to test random client-side blockchain stuff
//   with javascript.
// ---------------------------------------------------------------------------------------


// import all DoH JS test libraries in the standard way
require('DoHTestLib');


// ---------------------------------------------------------------------------------------
// ---------------------------------------------------------------------------------------


// Enabling this will print everything that's going on at the DoHTestDriver library
// for example, this, will log all cleos calls and all cleos output
//cth_debug_trace(true);


// ---------------------------------------------------------------------------------------
// ---------------------------------------------------------------------------------------


// Call the args parser helper
const switchesStr = 'cleos_url target';
const optionsStr = '';
const [switches, options] = cth_standard_args_parser(switchesStr, optionsStr);

console.log('Switches:', switches);
console.log('Options:', options);


// ---------------------------------------------------------------------------------------
// ---------------------------------------------------------------------------------------


fixtureInit("dohplayer1", "hg3", "tc3");

createBasicGame();
createBasicPlayers();
createBasicEconomy();


// --------------------------------------------------------------------------
// getProxyForContract POC
// --------------------------------------------------------------------------


console.log("**************************************************************************************************");
console.log("**************************************************************************************************");
console.log("**************************************************************************************************");
console.log("**************************************************************************************************");

try {

    const tokens = getProxyForContract(`tokens.${tcn_target}`);
    const meta = getProxyForContract(`meta.${doh_target}`);

    meta.setregion( {"id":1, "planet_id":1, "region_name":"region_1"} );
    meta.init(TIME_POINT_MAX, TIME_POINT_MAX);

    meta.setplayer( {"owner":"dohplayer1", "asset_url":"none", "referrer":"", "faction_id":1, "last_staking_action":TIME_POINT_MIN, "last_bid_action":TIME_POINT_MIN, "last_transfer_action":TIME_POINT_MIN, "last_reqinvite_action":TIME_POINT_MIN, "actions":0, "actions_reset_time":TIME_POINT_MIN} );

    meta._auth("dohplayer1");
    meta.open("dohplayer1", "4,TCN", "dohplayer1");

    tokens._auth(`hegemon.${doh_target}`);
    tokens.transfer(`hegemon.${doh_target}`, "dohplayer1", "100000.0000 TCN", "");

    tokens._auth("dohplayer1");
    tokens.transfer("dohplayer1",`meta.${doh_target}`, "10000.0000 TCN", "deposit");

    meta.dostake("dohplayer1", "0.0001 TCN", 1);

    console.log( JSON.stringify( meta.accounts( { "scope": "dohplayer1"} )));
    console.log( JSON.stringify( meta.players( { "scope": "CONTRACT" } )));

    meta._auth();
    meta.clear();

} catch (error) {

    // interesting note: when you use fixtureRun(), instead of doing that blob of javascript in the try block above,
    //  you get exception handling for free. since we didn't, here we have to catch() otherwise we get a dangling
    //  nodeos (because dohTest.js::finish() or dohTestFixture.js::fixtureFinish() must always be called before exiting).
    fixtureFinish(error);
}

console.log("**************************************************************************************************");
console.log("**************************************************************************************************");
console.log("**************************************************************************************************");
console.log("**************************************************************************************************");


// ---------------------------------------------------------------------------------------
// ---------------------------------------------------------------------------------------


fixtureFinish();
