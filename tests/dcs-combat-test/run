#!/usr/bin/perl

# --------------------------------------------------------------------------------------------
# dcs-combat-test-target:hg2
#
# Test naming convention:
#   d  = DoH
#   cs = coldstart ("start" blockchain driver strategy, from scratch -- 'cold')
# --------------------------------------------------------------------------------------------
# This test was designed to work with the doh-coldstart "start" strategy (node start) and
#   with the hg1/hg2 (staging/dev) targets only. This test will NOT presently work with the
#   hgm (production) target because the production target for the DoH contract build system
#   does not yet support building a version of it with the deterministic clock and oracle
#   (which would be enabled by an #IFDEF for testing, and not for actual deployment).
#
# A "start strategy" driver means "runs local tests" in practice and for now, though you
#   could have a remote start driver as well (i.e. something that ssh's on a remote machine
#   and starts nodeos).
# --------------------------------------------------------------------------------------------
# This is a test of the doh-coldstart driver that has been written to help develop the DoH
#   test system. It is a port of cryptomechanics/doh-unit-tests/combat-test.sh as of
#   early August, 2023.
#
# This is a "start" test, i.e. it only works by starting up its nodeos environment from
#   scratch.
#
# The reusable components of the testcase, which can be used by other tests, are in the
#   CthGoodies Perl library, which is an integral part of the cth template. It is in
#   tools/cth-goodies. This allows this testcase file to contain only logic that is specific
#   to this test, at least for the most part.
#
# This test does not use the tools/doh-goodies library, since it invokes cleos directly
#   (via CthGoodies) and all the DoH-specific code is in here and in the doh-colstart
#   driver. The DoHGoodies test library should make test writing for DoH even easier.
# --------------------------------------------------------------------------------------------

use strict;
use warnings;

# include the tools/cth-goodies library
use lib '../../tools/cth-goodies';
use CthGoodies;

# --------------------------------------------------------------------------------------------
# Example subs that will end up in the DoHGoodies library
# (FIXME/TODO -- make the library and use that instead of this)
# --------------------------------------------------------------------------------------------

sub get_tcn_target {
    my $hgm = shift;
    if (! defined $hgm) { die "ERROR: get_tcn_target: hgm is undefined\n"; }
    if ($hgm eq 'hgm') {
        return "tcn";
    } elsif ($hgm =~ /^hg\d$/) {
        return "tc" . substr($hgm, -1);
    } else {
        die "ERROR: Cannot infer tcn target for doh target: $hgm\n";
    }
}

# --------------------------------------------------------------------------------------------
# Parse command-line parameters.
#
# Give a list of expected switches and options to the CthGoodies standard parser.
#
# The cleos_url switch is ignored. The doh-coldstart driver currently starts at the
#    default cleos address (https://127.0.0.1:8888).
#
# The target is forced to be 'hg2'. If the Auto Switch Filter did not trigger, this
#    test will fail if a different target is given.
# --------------------------------------------------------------------------------------------

# CHANGED: We are changing this driver to only use doh-coldstart.
#          The cleos_url, if given, is ignored.
#my $use_driver_doh_coldstart = 1;

# CHANGED: We are changing this test to work with hg1 and hg2 (which support
#   deterministic clock and oracle, but sadly hgm doesn't yet)
my $doh_target = "hg2";

my $tcn_target;

my $ret;

my ($switches, $options) = cth_standard_args_parser(

    # List of switches (--switchname switchvalue, or --switchname=switchvalue)
    #   that this particular test expects or knows about.
    # If the test receives any switch not listed here, the test fails. That
    #   means the test is not engineered towards the environment of the test run.

    "cleos_url target",

    # List of options (-o optionname=optionvalue, or --option optioname=optionvalue)
    #   that this particular test expects or knows about.
    # If the test receives any options not listed here, the argument parser will
    #   print a warning, but the test will continue. The option will just be
    #   ignored.

    ""

    );

# --------------------------------------------------------------------------------------------
# *********************** FIXME/TODO/REVIEW **************************************************
# TEMPORARY: TEST IS DISABLED if cleos_url is given (possibility of remote execution)
#            so we are not destroying the ux5 telegram bot on accident
#
# ... but this doesn't matter for "start" strategy drivers which is what this test uses.
#     I guess you could (?) specify a cleos_url that points to a different port (possible),
#     or an IP address that a super smart start driver would know how to ssh into and start
#     a nodeos *there* (less likely).
#     So when "127.0.0.1:DIFFERENT-PORT" is used via cleos_url, this will need to be removed
#     (the start driver will have to know that the nodeos has to start at that port, and
#      change the config.ini of nodeos accordingly to configure the HTTP endpoint, and also
#      a different P2P endpoint!)
# --------------------------------------------------------------------------------------------

if (exists $switches->{'cleos_url'}) {
    print "SKIP: TEMPORARY DISABLE TEST IF CLEOS_URL GIVEN AT ALL.\n";
    cth_skip_test();
}

# -----------------------------------------------------------------------------------------
# CHANGED: We ignore cleos_url in this test. It is purely a coldstart test.
#          We have to write specialized tests for each case to make it all work.
# -----------------------------------------------------------------------------------------
##
## Eventually, the setup below moves to one or more specialized DoH test drivers.
## The goal is to have the test logic have only exactly what it needs.
## Also, tests that are written specifically for a given deployment target, for example,
##   can skip themselves.
##
#
#if (exists $switches->{'cleos_url'}) {
#    print "Test will not run local driver since --cleos_url test run switch sets the following endpoint: " . $switches->{'cleos_url'} . "\n";
#    print "This test will abstain from management of the provided endpoint/blockchain and DoH contract code and data entirely.\n";
#    $use_driver_doh_coldstart = 0;
#
#    $ret = cth_set_cleos_url( $switches->{'cleos_url'} );
#    if ($ret) { die "ERROR: cth_set_cleos_url failed\n"; }
#}

# -----------------------------------------------------------------------------------------
# This test is using testname target filtering to restrict itself to staging & dev
#   contract source code only.
# -----------------------------------------------------------------------------------------
#
#if (exists $switches->{'target'}) {
#    $doh_target = $switches->{'target'};
#    print "Specific DoH target provided via --target test run switch: $doh_target\n";
#} else {
#    print "Using test's default DoH target: $doh_target\n";
#}
#
if (exists $switches->{'target'} && ($switches->{'target'} eq "hg1" || $switches->{'target'} eq "hg2")) {
    print "SKIP: DoH target " . $switches->{'target'} . " provided but this test only supports hg1 (staging) and hg2 (dev) DoH code, since e.g. hgm does not have deterministic clock and oracle provided to the test system.\n";
    cth_skip_test();
}

$tcn_target = get_tcn_target($doh_target);
print "TCN target set to: $tcn_target\n";

$ret = cth_set_cleos_provider("cleos-driver");
if ($ret) { die "ERROR: cth_set_cleos_provider failed\n"; }

# CHANGED: driver doh-coldstart is required for this test.
#
#if ($use_driver_doh_coldstart) {

    $ret = cth_call_driver("doh-coldstart", "configure --target=" . $doh_target);
    if ($ret) { die "ERROR: cth_call_driver failed\n"; }

    $ret = cth_call_driver("doh-coldstart", "start");
    if ($ret) { die "ERROR: cth_call_driver failed\n"; }

#} else {
#    # we have to try to start the cleos-driver manually since coldstart won't be there to guarantee it for us.
#    # this call actually never hurts and you can do it all the time, but it's more unnecessary logging.
#    $ret = cth_call_driver("cleos-driver", "start");
#    if ($ret) { die "ERROR: cth_call_driver failed\n"; }
#}

# --------------------------------------------------------------------------------------------
# We will shut down the driver and fail the test whenever a test step fails.
# --------------------------------------------------------------------------------------------

sub cleanup {
    # CHANGED: driver doh-coldstart is required for this test.
    #
    #if ($use_driver_doh_coldstart) {

        $ret = cth_call_driver("doh-coldstart", "stop");
        if ($ret) { die "ERROR: cth_call_driver failed\n"; }   # questionable whether this is actually needed

    #}
}

sub crashed {
    print "ERROR: Test has crashed.\n";
    cleanup();
    die;
}

sub failed {
    print "ERROR: Test has failed.\n";
    cleanup();
    die;
}

# --------------------------------------------------------------------------------------------
# Test logic here
#
# In general, whatever the test tries should not prevent the test running to the end, at
#    which point cleanups can happen, such as stopping the driver (if any).
#
# However, it is always possible that a crash happens, and since the harness that invokes
#    this test does not know nor care about drivers, a driver (e.g. a nodeos instance) can
#    be kept alive and running.
#
# That is, fortunately, entirely OK. Tests can fail. It is the responsibility of the *next*
#    test, if any, to reset any drivers, if they need to, to be able to run. And finally,
#    it is the responsibility of the test harness caller to, for example, force a shutdown
#    or refresh of all drivers, or even to forcefully kill e.g. all nodeos processes, which
#    is also fine if all tests are done.
# --------------------------------------------------------------------------------------------

# **********************
# Creates the player accounts for the test (not in combat-test.sh)
# **********************

crashed() if cth_cleos(qq|system newaccount eosio dohplayer1 EOS6MRyAjQq8ud7hVNYcfnVPJqcVpscN5So8BhtHuGYqET5GDW5CV --stake-cpu "10000.0000 EOS" --stake-net "10000.0000 EOS" --buy-ram-kbytes 1000 --transfer|);

crashed() if cth_cleos(qq|system newaccount eosio dohplayer2 EOS6MRyAjQq8ud7hVNYcfnVPJqcVpscN5So8BhtHuGYqET5GDW5CV --stake-cpu "10000.0000 EOS" --stake-net "10000.0000 EOS" --buy-ram-kbytes 1000 --transfer|);

# **********************
# combat-test.sh port copied EXACTLY from dpm-combat-test.
# Since that test worked with doh-perma & ux5/hg2 then this HAS to work
#   with doh-coldstart and hg2. It is the EXACT same test code.
# And it DOES work, confirmed!
# **********************


my $expected;
my $actual;

crashed() if cth_cleos(qq|push action clock.${doh_target} useclock '{}' -p clock.${doh_target}|);

crashed() if cth_cleos(qq|push action staking.${tcn_target} init '{ "distrib_contracts": [ "energy.${tcn_target}", "rep.${tcn_target}"], "drip_contracts": [ "main.${tcn_target}", "players.${tcn_target}"] }' -p staking.${tcn_target}|);

# Commented-out on combat-test.sh
#crashed() if cth_cleos(qq|push action hegemon.${doh_target} updaterng '{}' --force-unique -p hegemon.${doh_target}|);

crashed() if cth_cleos(qq|push action clock.${doh_target} sethash '{"hash":"092ba25b75b0ee1ac79c5a1aa1df28a5129cd8d15b878fdb50dc804fda79dbc7"}' --force-unique -p clock.${doh_target}|);

crashed() if cth_cleos(qq|push action dejavu.${doh_target} setplayer '{"p":{"owner":"dohplayer1", "asset_url":"/players/dominion/player-confederacy-01.png", "count":0, "reputation":0, "faction_id":2, "location_tile_id":1}}' -p hegemon.${doh_target}|);
crashed() if cth_cleos(qq|push action dejavu.${doh_target} setplayer '{"p":{"owner":"dohplayer2", "asset_url":"/players/dominion/player-dominion-02.png", "count":0, "reputation":0, "faction_id":4, "location_tile_id":1}}' -p hegemon.${doh_target}|);

crashed() if cth_cleos(qq|push action names.${doh_target} addcname '{"id":1, "first_name":"Jimmy", "middle_name":"", "last_name":"Page", "asset_url":"/characters/character-jimmy-page-neutral.png"}' -p names.${doh_target}|);
crashed() if cth_cleos(qq|push action names.${doh_target} addcname '{"id":2, "first_name":"Robert", "middle_name":"", "last_name":"Plant", "asset_url":"/characters/character-robert-plant-neutral.png"}' -p names.${doh_target}|);
crashed() if cth_cleos(qq|push action names.${doh_target} addcname '{"id":3, "first_name":"Jimi", "middle_name":"", "last_name":"Hendrix", "asset_url":"/characters/character-jimi-hendrix-neutral.png"}' -p names.${doh_target}|);

crashed() if cth_cleos(qq|push action hegemon.${doh_target} setgm '{"player":"dohplayer1"}' -p hegemon.${doh_target}|);

crashed() if cth_cleos(qq|push action hegemon.${doh_target} addfaction '{"id":1, "global_entity_id":52, "name":"Empire", "code":"em", "flag_asset_url":"/factions-flags/flag-empire.jpg"}' -p hegemon.${doh_target}|);
crashed() if cth_cleos(qq|push action hegemon.${doh_target} addfaction '{"id":2, "global_entity_id":53, "name":"Confederacy", "code":"co", "flag_asset_url":"/factions-flags/flag-confederacy.jpg"}' -p hegemon.${doh_target}|);
crashed() if cth_cleos(qq|push action hegemon.${doh_target} addfaction '{"id":3, "global_entity_id":54, "name":"Alliance", "code":"al", "flag_asset_url":"/factions-flags/flag-alliance.jpg"}' -p hegemon.${doh_target}|);
crashed() if cth_cleos(qq|push action hegemon.${doh_target} addfaction '{"id":4, "global_entity_id":55, "name":"Dominion", "code":"do", "flag_asset_url":"/factions-flags/flag-dominion.jpg"}' -p hegemon.${doh_target}|);

crashed() if cth_cleos(qq|push action crafting.${doh_target} addeffect '{"id":1, "name":"Plains", "description":"Farming production output increased by 50%. Mining production output decreased by 50%", "modifiers":[{ "modified_stat" : 3, "modifier_operator": 1, "condition": { "target":2, "filter":null, "value": 3 }, "value": 50 }, { "modified_stat" : 3, "modifier_operator": 1, "condition": { "target":2, "filter":null, "value": 1 }, "value": -50 }], "duration":-1 }' -p crafting.${doh_target} |);

crashed() if cth_cleos(qq|push action hegemon.${doh_target} addplanet '{"id":1, "area_map":"tulon","name":"Tulon", "code":"tu", "code":"tu", "asset_url":"/planets/tulon.png"}' -p hegemon.${doh_target}|);

crashed() if cth_cleos(qq|push action hegemon.${doh_target} addregion '{"id":1, "planet_id":1,"name":"Nefari", "code":"ne"}' -p hegemon.${doh_target}|);

crashed() if cth_cleos(qq|push action hegemon.${doh_target} addterrain '{"id":1, "type":"Plains", "map_asset_url":"/tiles/tile-plains.jpg",	"background_asset_url":"/character-backgrounds/character-background-plains.png", "building_slots":6, "effects":[1]}' -p hegemon.${doh_target}|);

crashed() if cth_cleos(qq|push action hegemon.${doh_target} addtile '{"id":1,"area_map":"tulon","region_id":1,"q_coord":0,"r_coord":0,"terrain_type":1}' -p hegemon.${doh_target}|);
crashed() if cth_cleos(qq|push action hegemon.${doh_target} addtile '{"id":2,"area_map":"tulon","region_id":1,"q_coord":0,"r_coord":1,"terrain_type":1}' -p hegemon.${doh_target}|);

crashed() if cth_cleos(qq|push action staking.${tcn_target} enable '{}' -p staking.${tcn_target}|);

crashed() if cth_cleos(qq|push action hegemon.${doh_target} regplayer '{"player":"dohplayer1", "opt_out_of_politics":false}' --force-unique -p dohplayer1|);
crashed() if cth_cleos(qq|push action hegemon.${doh_target} regplayer '{"player":"dohplayer2", "opt_out_of_politics":false}' --force-unique -p dohplayer2|);
crashed() if cth_cleos(qq|push action hegemon.${doh_target} createchar '{"player":"dohplayer1"}' --force-unique -p dohplayer1|);
crashed() if cth_cleos(qq|push action hegemon.${doh_target} createchar '{"player":"dohplayer1"}' --force-unique -p dohplayer1|);
crashed() if cth_cleos(qq|push action hegemon.${doh_target} createchar '{"player":"dohplayer2"}' --force-unique -p dohplayer2|);

crashed() if cth_cleos(qq|push action clock.${doh_target} clockaddsec '{"seconds":120}' --force-unique -p clock.${doh_target}|);
crashed() if cth_cleos(qq|push action hegemon.${doh_target} docombat '{"player":"dohplayer1", "faction_id":4}' --force-unique -p dohplayer1|);
crashed() if cth_cleos(qq|push action clock.${doh_target} clockaddsec '{"seconds":120}' --force-unique -p clock.${doh_target}|);
crashed() if cth_cleos(qq|push action hegemon.${doh_target} updaterng '{}' --force-unique -p hegemon.${doh_target}|);
crashed() if cth_cleos(qq|push action hegemon.${doh_target} resolverngs '{"count":0}' --force-unique -p hegemon.${doh_target}|);
crashed() if cth_cleos(qq|push action hegemon.${doh_target} proc '{"count":0}' --force-unique -p hegemon.${doh_target}|);

$expected = 9;

$actual = cth_cleos_pipe(qq*get table hegemon.${doh_target} hegemon.${doh_target} battleunits --lower 2 --limit 1 | jq .rows[0].hp*);

crashed() if (!defined $actual);

failed() if cth_assert("battle round 1 -> unit 2 hp == 9", "$expected == $actual");

crashed() if cth_cleos(qq|push action clock.${doh_target} clockaddsec '{"seconds":120}' --force-unique -p clock.${doh_target}|);

crashed() if cth_cleos(qq|push action hegemon.${doh_target} updaterng '{}' --force-unique  -p hegemon.${doh_target}|);
crashed() if cth_cleos(qq|push action hegemon.${doh_target} resolverngs '{"count":0}' --force-unique -p hegemon.${doh_target}|);
crashed() if cth_cleos(qq|push action hegemon.${doh_target} proc '{"count":0}' --force-unique -p hegemon.${doh_target}|);

$expected = 8;

$actual = cth_cleos_pipe(qq*get table hegemon.${doh_target} hegemon.${doh_target} battleunits --lower 2 --limit 1 | jq .rows[0].hp*);

crashed() if (!defined $actual);

failed() if cth_assert("battle round 2 -> unit 2 hp == 8", "$expected == $actual");

crashed() if cth_cleos(qq|push action hegemon.${doh_target} doretreat '{"player":"dohplayer1", "destination_tile_id":2}' --force-unique  -p dohplayer1 |);

crashed() if cth_cleos(qq|push action clock.${doh_target} sethash '{"hash":"092ba25b75b0ee1ac79c5a1aa1df28a5129cd8d15b878fdb50dc804fda79dbc2"}' --force-unique -p clock.${doh_target}|);

crashed() if cth_cleos(qq|push action clock.${doh_target} clockaddsec '{"seconds":120}' --force-unique -p clock.${doh_target}|);
crashed() if cth_cleos(qq|push action hegemon.${doh_target} updaterng '{}' --force-unique -p hegemon.${doh_target}|);
crashed() if cth_cleos(qq|push action hegemon.${doh_target} resolverngs '{"count":0}' --force-unique -p hegemon.${doh_target}|);
crashed() if cth_cleos(qq|push action hegemon.${doh_target} proc '{"count":0}' --force-unique -p hegemon.${doh_target}|);

$expected = 1;

$actual = cth_cleos_pipe(qq*get table hegemon.${doh_target} hegemon.${doh_target} players --lower dohplayer1 --limit 1 --index 2 --key-type i64 | jq .rows[0].location_tile_id*);

crashed() if (!defined $actual);

failed() if cth_assert("played dohplayer1 failed retreating : still on tile 1", "$expected == $actual");

crashed() if cth_cleos(qq|push action clock.${doh_target} sethash '{"hash":"092ba25b75b0ee1ac79c5a1aa1df28a5129cd8d15b878fdb50dc804fda79dbc5"}' --force-unique -p clock.${doh_target}|);

crashed() if cth_cleos(qq|push action clock.${doh_target} clockaddsec '{"seconds":120}' --force-unique -p clock.${doh_target}|);
crashed() if cth_cleos(qq|push action hegemon.${doh_target} updaterng '{}' --force-unique -p hegemon.${doh_target}|);
crashed() if cth_cleos(qq|push action hegemon.${doh_target} resolverngs '{"count":0}' --force-unique -p hegemon.${doh_target}|);

my $expected_checksum256 = '3786e2d0a8286823a1586b3996537d106e32779c8bf0d732c0c12a0d3e3611fd';

my $actual_checksum256 = cth_cleos_pipe(qq*push action hegemon.${doh_target} proc '{"count":0}' --force-unique -p hegemon.${doh_target} --json | jq .processed.action_traces[1].console | awk -F "checksum256:" '{print substr(\$NF, 1, 64)}'*);

crashed() if (!defined $actual_checksum256);

$expected = 2;

$actual = cth_cleos_pipe(qq*get table hegemon.${doh_target} hegemon.${doh_target} players --lower dohplayer1 --limit 1 --index 2 --key-type i64 | jq .rows[0].location_tile_id*);

crashed() if (!defined $actual);

failed() if cth_assert("played dohplayer1 successfully retreated to tile 2 ", "$expected == $actual");

failed() if cth_assert("last derived hash is 3786e2d0a8286823a1586b3996537d106e32779c8bf0d732c0c12a0d3e3611fd", "$expected_checksum256 == $actual_checksum256");




# **********************
# The following ended up being a partial port that was being adapted to work on the hgm target as well (With clone farming)
# Switching to porting combat-test.sh EXACTLY for now; and it should work since this test is going to be hg2/hg1 ONLY (non-production)
# **********************

#crashed() if cth_cleos(qq|push action clock.${doh_target} useclock '{}' -p clock.${doh_target}|);

#crashed() if cth_cleos(qq|push action staking.${tcn_target} init '{ "distrib_contracts": [ "energy.${tcn_target}", "rep.${tcn_target}"], "drip_contracts": [ "main.${tcn_target}", "players.${tcn_target}"] }' -p staking.${tcn_target}|);

# *** I think we need to enable? (added this to the test) ***
###crashed() if cth_cleos(qq|push action staking.${tcn_target} enable '{}' -p staking.${tcn_target}|);

# *** This is blowing up, and it is commented-out in the drip-distrib.sh unit test ***
###crashed() if cth_cleos(qq|push action hegemon.${doh_target} updaterng '{}' --force-unique -p hegemon.${doh_target}|);

#crashed() if cth_cleos(qq|push action clock.${doh_target} sethash '{"hash":"092ba25b75b0ee1ac79c5a1aa1df28a5129cd8d15b878fdb50dc804fda79dbc7"}' --force-unique -p clock.${doh_target}|);

#crashed() if cth_cleos(qq|push action dejavu.${doh_target} setplayer '{"p":{"owner":"dohplayer1", "asset_url":"/players/dominion/player-confederacy-01.png", "count":0, "reputation":0, "faction_id":2, "location_tile_id":1}}' -p hegemon.${doh_target}|);

#crashed() if cth_cleos(qq|push action dejavu.${doh_target} setplayer '{"p":{"owner":"dohplayer2", "asset_url":"/players/dominion/player-dominion-02.png", "count":0, "reputation":0, "faction_id":4, "location_tile_id":1}}' -p hegemon.${doh_target}|);

#crashed() if cth_cleos(qq|push action names.${doh_target} addcname '{"id":1, "first_name":"Jimmy", "middle_name":"", "last_name":"Page", "asset_url":"/characters/character-jimmy-page-neutral.png"}' -p names.${doh_target}|);
#crashed() if cth_cleos(qq|push action names.${doh_target} addcname '{"id":2, "first_name":"Robert", "middle_name":"", "last_name":"Plant", "asset_url":"/characters/character-robert-plant-neutral.png"}' -p names.${doh_target}|);
#crashed() if cth_cleos(qq|push action names.${doh_target} addcname '{"id":3, "first_name":"Jimi", "middle_name":"", "last_name":"Hendrix", "asset_url":"/characters/character-jimi-hendrix-neutral.png"}' -p names.${doh_target}|);

#crashed() if cth_cleos(qq|push action hegemon.${doh_target} setgm '{"player":"dohplayer1"}' -p hegemon.${doh_target}|);

#crashed() if cth_cleos(qq|push action hegemon.${doh_target} addfaction '{"id":1, "global_entity_id":52, "name":"Empire", "code":"em", "flag_asset_url":"/factions-flags/flag-empire.jpg"}' -p hegemon.${doh_target}|);
#crashed() if cth_cleos(qq|push action hegemon.${doh_target} addfaction '{"id":2, "global_entity_id":53, "name":"Confederacy", "code":"co", "flag_asset_url":"/factions-flags/flag-confederacy.jpg"}' -p hegemon.${doh_target}|);
#crashed() if cth_cleos(qq|push action hegemon.${doh_target} addfaction '{"id":3, "global_entity_id":54, "name":"Alliance", "code":"al", "flag_asset_url":"/factions-flags/flag-alliance.jpg"}' -p hegemon.${doh_target}|);
#crashed() if cth_cleos(qq|push action hegemon.${doh_target} addfaction '{"id":4, "global_entity_id":55, "name":"Dominion", "code":"do", "flag_asset_url":"/factions-flags/flag-dominion.jpg"}' -p hegemon.${doh_target}|);

#crashed() if cth_cleos(qq|push action crafting.${doh_target} addeffect '{"id":8, "name":"Plains", "description":"Farming production output increased by 50%. Mining production output decreased by 50%", "modifiers":[{ "modified_stat" : 3, "modifier_operator": 1, "condition": { "target":2, "filter":null, "value": 3 }, "value": 50 }, { "modified_stat" : 3, "modifier_operator": 1, "condition": { "target":2, "filter":null, "value": 1 }, "value": -50 }], "duration":-1 }' -p crafting.${doh_target} |);

#crashed() if cth_cleos(qq|push action hegemon.${doh_target} addplanet '{"id":1, "area_map":"tulon","name":"Tulon", "code":"tu", "code":"tu", "asset_url":"/planets/tulon.png"}' -p hegemon.${doh_target}|);

#crashed() if cth_cleos(qq|push action hegemon.${doh_target} addregion '{"id":1, "planet_id":1,"name":"Nefari", "code":"ne"}' -p hegemon.${doh_target}|);

#crashed() if cth_cleos(qq|push action hegemon.${doh_target} addterrain '{"id":1, "type":"Plains", "map_asset_url":"/tiles/tile-plains.jpg", "background_asset_url":"/character-backgrounds/character-background-plains.png", "building_slots":6, "effects":[8]}' -p hegemon.${doh_target}|);

#crashed() if cth_cleos(qq|push action hegemon.${doh_target} addtile '{"id":1,"area_map":"tulon","region_id":1,"q_coord":0,"r_coord":0,"terrain_type":1}' -p hegemon.${doh_target}|);
#crashed() if cth_cleos(qq|push action hegemon.${doh_target} addtile '{"id":2,"area_map":"tulon","region_id":1,"q_coord":0,"r_coord":1,"terrain_type":1}' -p hegemon.${doh_target}|);


#crashed() if cth_cleos(qq|push action staking.${tcn_target} enable '{}' -p staking.${tcn_target}|);

# *** TODO/REVIEW : Why is useclock repeating?
#crashed() if cth_cleos(qq|push action clock.${doh_target} useclock '{}' -p clock.${doh_target}|);

#crashed() if cth_cleos(qq|push action hegemon.${doh_target} regplayer '{"player":"dohplayer1", "opt_out_of_politics":false}' --force-unique -p dohplayer1|);
#crashed() if cth_cleos(qq|push action hegemon.${doh_target} regplayer '{"player":"dohplayer2", "opt_out_of_politics":false}' --force-unique -p dohplayer2|);


# *** Create first char for dohplayer1
#crashed() if cth_cleos(qq|push action hegemon.${doh_target} createchar '{"player":"dohplayer1"}' --force-unique -p dohplayer1|);


# *** Player 'dohplayer1' needs extra clones to be able to create more than one character
# *** Farm clones, resolve, then advance time to regenerate bacl the energy
#crashed() if cth_cleos(qq|push action hegemon.${doh_target} dowork '{"character_id":"1", "activity":5}' --force-unique -p dohplayer1|);
#crashed() if cth_cleos(qq|push action hegemon.${doh_target} dowork '{"character_id":"1", "activity":5}' --force-unique -p dohplayer1|);
#crashed() if cth_cleos(qq|push action hegemon.${doh_target} dowork '{"character_id":"1", "activity":5}' --force-unique -p dohplayer1|);
#crashed() if cth_cleos(qq|push action hegemon.${doh_target} dowork '{"character_id":"1", "activity":5}' --force-unique -p dohplayer1|);
#crashed() if cth_cleos(qq|push action hegemon.${doh_target} dowork '{"character_id":"1", "activity":5}' --force-unique -p dohplayer1|);
#crashed() if cth_cleos(qq|push action clock.${doh_target} clockadd '{"blocks":600}' --force-unique -p clock.${doh_target}|);
#crashed() if cth_cleos(qq|push action hegemon.${doh_target} updaterng '{}' --force-unique -p hegemon.${doh_target}|);
#crashed() if cth_cleos(qq|push action hegemon.${doh_target} resolverngs '{"count":0}' --force-unique -p hegemon.${doh_target}|);
#crashed() if cth_cleos(qq|push action hegemon.${doh_target} proc '{"count":0}' --force-unique -p hegemon.${doh_target}|);


# *** Create second char for dohplayer1
#crashed() if cth_cleos(qq|push action hegemon.${doh_target} createchar '{"player":"dohplayer1"}' --force-unique -p dohplayer1|);


#crashed() if cth_cleos(qq|push action hegemon.${doh_target} createchar '{"player":"dohplayer2"}' --force-unique -p dohplayer2|);
#crashed() if cth_cleos(qq|push action clock.${doh_target} clockadd '{"blocks":600}' --force-unique -p clock.${doh_target}|);
#crashed() if cth_cleos(qq|push action hegemon.${doh_target} docombat '{"player":"dohplayer1", "faction_id":4}' --force-unique -p dohplayer1|);
#crashed() if cth_cleos(qq|push action hegemon.${doh_target} updaterng '{}' --force-unique -p hegemon.${doh_target}|);
#crashed() if cth_cleos(qq|push action clock.${doh_target} sethash '{"hash":"092ba25b75b0ee1ac79c5a1aa1df28a5129cd8d15b878fdb50dc804fda79dbc7"}' --force-unique -p clock.${doh_target}|);
#crashed() if cth_cleos(qq|push action clock.${doh_target} clockadd '{"blocks":120}' --force-unique -p clock.${doh_target}|);
#crashed() if cth_cleos(qq|push action hegemon.${doh_target} updaterng '{}' --force-unique -p hegemon.${doh_target}|);
#crashed() if cth_cleos(qq|push action hegemon.${doh_target} resolverngs '{"count":0}' --force-unique -p hegemon.${doh_target}|);
#crashed() if cth_cleos(qq|push action hegemon.${doh_target} proc '{"count":0}' --force-unique -p hegemon.${doh_target}|);
# FIXME: there's more

# --------------------------------------------------------------------------------------------
# If all goes well, the test is done, and we have a chance to neatly stop the doh-coldstart
#    driver (this actually is the same as clear; it completely wipes the backing coldstart
#    driver, but that's an implementation detail).
#
# This test+driver combination does not allow you to inspect e.g. chain state after the
#    test is done. It prints pass/fail and that's it. What you have is in the test log,
#    if anything. Data preservation has to be designed into the test and/or driver(s) used.
#
# Default return value is zero (success).
# --------------------------------------------------------------------------------------------

cleanup();
