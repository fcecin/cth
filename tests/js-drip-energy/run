#!/usr/bin/env node

// --------------------------------------------------------------------------------------------
// js-drip-energy
// --------------------------------------------------------------------------------------------
// This is a functional test focused on the distrib contract in period_reset_mode == true,
//   which is the mode the code operates in when it is deployed and init'ed in energy.tcn
//   for example.
//
// FIXME/TODO: test is passing, but fix javascript translation garbage:
//   - cth_assert correctly used
//   - various crashes are fails
//   - actually introduce a crashed-if-undefined helper function in DoHTest.js
// --------------------------------------------------------------------------------------------

Object.assign(global, require('DoHTestDriver'));
Object.assign(global, require('DoHTest'));

// --------------------------------------------------------------------------------------------
// Set up the test
// --------------------------------------------------------------------------------------------

// global variables required by init()
doh_target = "hg3";
tcn_target = "tc3";
doh_gm     = "dohplayer.aa";

// FIXME/TODO: This has to be obtained either from the source code of the target or
//             the running contract (e.g. consulting the readonly contract)
//             there's doh_get_constants now so USE IT
let ONE_DAY             = 300;
let DAYS_PER_CYCLE      = 6;
let CYCLES_PER_PERIOD   = 3;
let DAYS_PER_PAYMENT    = DAYS_PER_CYCLE * CYCLES_PER_PERIOD;

// Maximum number of players has been set to 50 in one of the version of
//   the code, so we're going to be using that number a lot for tests.
let doh_max_players     = 30;

// starts nodeos
init();

// get the game constants from the readonly contract
let doh = doh_get_constants();

// --------------------------------------------------------------------------------------------
// Testcase variable declarations and helper functions
// --------------------------------------------------------------------------------------------

let o;
let expected;
let actual;
let dist;
let total_work = 0;
let energy_cost_work;   // cost of 1 work action (e.g. a char mines its tile)
let FARM = 3;           // work code
let players = [];       // used by do_player_work sub so declare here

console.log("TEST: testcase started.\n");

function run_endday_and_test(day_number, work_was_done) {
    console.log("Starting run_endday_and_test()");

    check("day_number", day_number);
    check("work_was_done", work_was_done);

    console.log(`Ending day ${day_number}; work done today? = ${work_was_done}`);

    cth_cleos(`push action clock.${doh_target} clockaddsec '{"seconds":${ONE_DAY}}' --force-unique -p clock.${doh_target}`) ? crashed() : null;

    const text_blob = cth_cleos_pipe(`push action hegemon.${doh_target} endday '{}' --force-unique -p hegemon.${doh_target}`);
    check("text_blob", text_blob);

    if (work_was_done) {
        let daily_inflation;
        let energy_transfer;
        let rep_transfer;

        const dailyInflationMatch = /daily_inflation : (\d+\.\d+) TCN/.exec(text_blob);
        if (dailyInflationMatch) {
            daily_inflation = parseFloat(dailyInflationMatch[1]);
        } else {
            console.log("ERROR: can't find endday daily_inflation");
            crashed();
        }

        const energyTransferMatch = /Transfer detected : players\.tc. energy\.tc. (\d+\.\d+) TCN/.exec(text_blob);
        if (energyTransferMatch) {
            energy_transfer = parseFloat(energyTransferMatch[1]);
        } else {
            console.log("ERROR: can't find endday energy transfer");
            crashed();
        }

        const repTransferMatch = /Transfer detected : players\.tc. rep\.tc. (\d+\.\d+) TCN/.exec(text_blob);
        if (repTransferMatch) {
            rep_transfer = parseFloat(repTransferMatch[1]);
        } else {
            console.log("ERROR: can't find endday rep transfer");
            crashed();
        }

        if (daily_inflation > 0 && (energy_transfer + rep_transfer) === daily_inflation) {
            console.log("Consistent hegemon::endday result received:");
            console.log(`Daily Inflation: ${daily_inflation} TCN`);
            console.log(`Energy Transfer: ${energy_transfer} TCN`);
            console.log(`Rep Transfer: ${rep_transfer} TCN`);
        } else {
            console.log("ERROR: Invalid data from hegemon::endday.");
            failed();
        }
    }

    console.log(`Checking that we indeed ended day ${day_number} ...`);

    const date_string = cth_cleos_pipe(`get table hegemon.${doh_target} hegemon.${doh_target} global | jq .rows[0].day_stats.day_start | tr -d '"'`);
    check("date_string", date_string);

    const expected = ONE_DAY * day_number;
    const actual = epochSecsFromDateString(date_string);

    cth_assert(`unix timestamp for day_start is ${expected}`, `${expected} == ${actual}`) ? failed() : null;

    console.log("Finished run_endday_and_test().");
}

function do_player_work(day_number) {
    console.log("Starting do_player_work()");

    check("day_number", day_number);

    console.log(`Players are doing 'random' work with their characters in day ${day_number}.`);

    for (let pid = 1; pid <= doh_max_players; pid++) {
        const player_name = players[pid - 1];

        // We expect the player's char to have the same ID since each player creates exactly 1 char.
        const char_id = pid;

        // all chars mine pid % 5 times
        // except player1 which has 1 extra work cycle from the benchmark step above
        const work_count = ((pid - 1) % 5) + 1;
        console.log(`Player ${pid} ('${player_name}') will work ${work_count} times today`);

        for (let i = 1; i <= work_count; i++) {
            cth_cleos(`push action hegemon.${doh_target} dowork '[${char_id}, ${FARM}]' --force-unique -p ${player_name}`) ? crashed() : null;
            total_work++;
        }
    }

    console.log("Checking numerator of all players whose characters have worked today...");

    for (let pid = 1; pid <= doh_max_players; pid++) {
        const player_name = players[pid - 1];

        const num = cth_cleos_pipe(`get table energy.${tcn_target} energy.${tcn_target} users -L${player_name} -U${player_name} | jq .rows[0].numerator | tr -d '"'`);
        check("num", num);

        let work_cycles = ((pid - 1) % 5) + 1;
        if (pid === 1 && day_number === 1)
            work_cycles++; // extra work on the first day to account for the work cost benchmark done with dohplayer.aa

        const expected = work_cycles * energy_cost_work; // energy_cost_work should be 30 if nothing changed, and the numerator is directly a sum of spent energy working
        cth_assert(`Expecting ${work_cycles} * ${energy_cost_work} == ${expected}`, `${expected} == ${num}`) ? failed() : null;
    }
    console.log("Finished do_player_work()");
}

// --------------------------------------------------------------------------------------------
// Testcase start
// --------------------------------------------------------------------------------------------

// FIXME/TODO: Advanced test scenarios (check that all of these are in fact covered):
//
// The other function we need to cover with the unit tests is the transfer notification handler, which is triggered by the inflation payment, which is itself initiated by the endday action in the hegemon.hgm contract.
// For instance, we need to be testing situations where a single deposit is received, multiple deposits are received or no deposits are received for a given period.
// We must also test periods where multiple users are eligible, where a single user is eligible, and where no users are eligible.
// We need to test users sometimes performing actions, and sometimes not, over a number of periods.

// **********************
// Create the basic world
// (also declares GM from doh_gm globalvar)
// **********************

createBasicGame();

// **********************
// Economy inits
// **********************

cth_cleos(`push action main.${tcn_target} adddrip '{"symbol":"4,TCN", "contract":"tokens.${tcn_target}", "buckets":["players.${tcn_target}"], "shares":[10000]}' --force-unique -p main.${tcn_target}@active`) ? crashed() : null;
cth_cleos(`push action players.${tcn_target} adddrip '{"symbol":"4,TCN", "contract":"tokens.${tcn_target}", "buckets":["energy.${tcn_target}","rep.${tcn_target}"], "shares":[7000, 3000]}' --force-unique -p players.${tcn_target}@active`) ? crashed() : null;
cth_cleos(`push action tokens.${tcn_target} create '{"issuer":"hegemon.${doh_target}", "maximum_supply":"100000000000.0000 TCN"}' -p tokens.${tcn_target}@active`) ? crashed() : null;
cth_cleos(`push action tokens.${tcn_target} issue '{"to":"hegemon.${doh_target}", "quantity":"100000000.0000 TCN", "memo":"initial issuance"}' -p hegemon.${doh_target}@active`) ? crashed() : null;
cth_cleos(`transfer hegemon.${doh_target} reserve.${tcn_target} "100000000.0000 TCN" "" --contract tokens.${tcn_target} -p hegemon.${doh_target}@active`) ? crashed() : null;

// **********************
// Hash init
// **********************

cth_cleos(`push action clock.${doh_target} sethash '{"hash":"092ba25b75b0ee1ac79c5a1aa1df28a5129cd8d15b878fdb50dc804fda79dbc7"}' --force-unique -p clock.${doh_target}`) ? crashed() : null;

// **********************
// Create players and 1 char for each player
// Also does some init stuff
// **********************

players = cth_generate_account_names('dohplayer.', 'aa', doh_max_players);
let char1 = 1;
let player1 = 'dohplayer.aa';
let player_id = 0;

players.forEach((player) => {
    player_id++;

    // push a character name for this player
    cth_cleos(`push action names.${doh_target} addcname '{"id":1, "first_name":"Jimmy", "middle_name":"${player}", "last_name":"Page", "asset_url":"/characters/character-jimmy-page-neutral.png", "faction_id":1}' -p names.${doh_target}`) ? crashed() : null;

    // create account
    cth_cleos(`system newaccount eosio ${player} EOS6MRyAjQq8ud7hVNYcfnVPJqcVpscN5So8BhtHuGYqET5GDW5CV --stake-cpu "10000.0000 EOS" --stake-net "10000.0000 EOS" --buy-ram-kbytes 1000 --transfer`) ? crashed() : null;

    // setup dejavu
    cth_cleos(`push action dejavu.${doh_target} setplayer '{"p":{"owner":"${player}", "asset_url":"/players/empire/player-empire-01.png", "count":0, "reputation":0, "faction_id":1, "location_tile_id":1}}' -p hegemon.${doh_target}`) ? crashed() : null;

    // regplayer
    cth_cleos(`push action hegemon.${doh_target} regplayer '{"player":"${player}", "opt_out_of_politics":0}' --force-unique -p ${player}`) ? crashed() : null;

    // create this player's char
    cth_cleos(`push action hegemon.${doh_target} createchar '{"player":"${player}"}' --force-unique -p ${player}`) ? crashed() : null;
});

// **********************
// Legacy work cycle that we have to keep to avoid having to fix the test math
// **********************

cth_cleos(`push action hegemon.${doh_target} dowork '[${char1}, ${FARM}]' --force-unique -p ${player1}`) ? crashed() : null;
total_work++;

// **********************
// Get the cost of a work action from the readonly contract
// **********************

console.log("Fetching cost of gameplay action (e.g. work action)...");
check("doh.GAMEPLAY_ENERGY_COST", doh.GAMEPLAY_ENERGY_COST);
energy_cost_work = doh.GAMEPLAY_ENERGY_COST;
console.log(`Energy cost of work is: ${energy_cost_work}`);

// **********************
// The test logic is run once.
//  Distribution id == 0 is a dummy that never gets gc'd or used.
// Distribution id == 1 is the first one that actually gets distributed.
// **********************

console.log("Running test logic.");

// -----------------------------------------------------------------------------------------
// Work players for day 1 and assert numerators are correct
// -----------------------------------------------------------------------------------------

console.log("Working players for day 1...");
do_player_work(1);

// -----------------------------------------------------------------------------------------
// Check the distribution object at the end of the first day
// -----------------------------------------------------------------------------------------

dist = cth_cleos_pipe(`get table energy.${tcn_target} energy.${tcn_target} distribs`);
check("dist", dist);

console.log("Distribs at the end of the first day looks like this:");
console.log(dist);

// -----------------------------------------------------------------------------------------
// Advance clock for the first time (the day the characters are alive and did work)
// -----------------------------------------------------------------------------------------

console.log("Concluding first day and checking inflation and numerators are positive/correct.");
run_endday_and_test(1, 1);

// -----------------------------------------------------------------------------------------
// Check the distribution object again at the beginning of the second day
// -----------------------------------------------------------------------------------------

console.log("Check the distribution object again at the beginning of the second day");
dist = cth_cleos_pipe(`get table energy.${tcn_target} energy.${tcn_target} distribs`);
check("dist", dist);
console.log("Distribs at the beginning of the second day looks like this:");
console.log(dist);

// -----------------------------------------------------------------------------------------
// Ok, so it seems that the work in the first day only generates inflation.
// We need to work on the second day to dispute the to_distribute of the new distribution
//    that is generated at the beginning of the second day with the inflation of the first.
// -----------------------------------------------------------------------------------------

console.log("Working players for day 2...");
do_player_work(2);

// -----------------------------------------------------------------------------------------
// Check the distribution object at the end of second day
// -----------------------------------------------------------------------------------------

console.log("Check the distribution object at the end of the second day");
dist = cth_cleos_pipe(`get table energy.${tcn_target} energy.${tcn_target} distribs`);
check("dist", dist);
console.log("Distribs at the end of the second day looks like this:");
console.log(dist);

// -----------------------------------------------------------------------------------------
// Finish second day and assert the same things as we did in the first day,
//   but this TCN will never be distributed
// -----------------------------------------------------------------------------------------

console.log("Finish second day and assert the same things as we did in the first day, but this TCN will never be distributed");
run_endday_and_test(2, 1);

// -----------------------------------------------------------------------------------------
// Check the distribution table at the beginning of the third day
// -----------------------------------------------------------------------------------------

console.log("Check the distribution table at the beginning of the third day");
dist = cth_cleos_pipe(`get table energy.${tcn_target} energy.${tcn_target} distribs`);
check("dist", dist);
console.log("Distribs at the beginning of the third day looks like this:");
console.log(dist);

// -----------------------------------------------------------------------------------------
// Third day, no work
//
// TODO/REVIEW: I do not know exactly why we need to end the third day and go into the
//   fourth day to get TCN distributed. Is it the end of the cycle (3-day week in hg2/tc2)?
//   When and why distrib id==2 exists then? Confirm this.
// -----------------------------------------------------------------------------------------

console.log("Third day, no work");
run_endday_and_test(3, 0);

console.log("No work done on day 3. Distribs at the beginning of the fourth day looks like this:");
dist = cth_cleos_pipe(`get table energy.${tcn_target} energy.${tcn_target} distribs`);
check("dist", dist);
console.log("Distribs at the beginning of the fourth day looks like this:");
console.log(dist);

// -----------------------------------------------------------------------------------------
// Players make TCN/drip claims, except the last player
//
// This crashes if there is no TCN to claim, so if this passes, the TCN amounts
//   are positive and have to correspond to the player's numerators (work done).
// -----------------------------------------------------------------------------------------

console.log("We will do all claims for distribution id == 1 now (except for the last player).");

for (let pid = 1; pid <= doh_max_players - 1; pid++) {
    let player_name = players[pid - 1];
    console.log(`Player ${pid} ('${player_name}') will now claim their TCN.`);
    cth_cleos(`push action energy.${tcn_target} claim '["${player_name}"]' -p ${player_name}`) ? crashed() : null;
}

// -----------------------------------------------------------------------------------------
// Check the distribution table at the beginning of the third day
// -----------------------------------------------------------------------------------------

console.log("Check the distribution table at the beginning of the third day");
dist = cth_cleos_pipe(`get table energy.${tcn_target} energy.${tcn_target} distribs`);
check("dist", dist);
console.log("Distribs at the beginning of the third day, after all claims made EXCEPT FOR THE LAST PLAYER, looks like this:");
console.log(dist);

// On distribution id==1 (which seems to be the first that is actually claimable since id==0 does not
//   seem to ever get any TCN on it so it is never claimed and thus never gc'd)
// ...
//   check that stakers_count - stakers_claimed == 1 (the player who didn't claim)
//   check that distributed is nonzero

console.log("Checking that the distribution has the pending claim of the last player...");


// check that the second row of the distribs table is distribution id==1 (i.e. not gc'd yet)
let row2id = cth_cleos_pipe(`get table energy.${tcn_target} energy.${tcn_target} distribs | jq .rows[1].id`);
check("row2id", row2id);
cth_assert(`id of second distribution returned is 1 (it was not completed and thus not gc'd yet)`, `${row2id} == 1`) ? failed() : null;

// Get the distribution amount for distribution id == 1
let todistrib = cth_cleos_pipe(`get table energy.${tcn_target} energy.${tcn_target} distribs | jq .rows[1].to_distribute`);
check("todistrib", todistrib);
todistrib = doh_extract_tcn_amount(todistrib);
todistrib < 0 ? crashed() : null;
console.log(`To distribute: ${todistrib}`);
cth_assert(`To distribute is greater than zero`, `${todistrib} > 0`) ? failed() : null;

// -----------------------------------------------------------------------------------------
// Execute last claim and verify that distribution id == 1 is gone (gc'd)
// -----------------------------------------------------------------------------------------

let pid = doh_max_players;
let player_name = players[pid - 1];
console.log(`Player ${pid} ('${player_name}') will now claim their TCN (LAST PLAYER!).`);
cth_cleos(`push action energy.${tcn_target} claim '["${player_name}"]' -p ${player_name}`) ? crashed() : null;

console.log("Check the distribution table after all claims made.");
dist = cth_cleos_pipe(`get table energy.${tcn_target} energy.${tcn_target} distribs`);
check("dist", dist);
console.log("Distribs at the beginning of the third day, after ALL claims made (INCLUDING LAST PLAYER), looks like this:");
console.log(dist);

//get the id at the second row
row2id = cth_cleos_pipe(`get table energy.${tcn_target} energy.${tcn_target} distribs | jq .rows[1].id`);
check("row2id", row2id); //has to be defined, since that will be id==2 (the distribution that is pipelined for distribution the *next* day)
cth_assert(`id of second distribution returned is not 1 (it was completed and gc'd)`, `${row2id} != 1`) ? failed() : null;

// -----------------------------------------------------------------------------------------
// Check that the TCN balance between all players is proportional to their work on the
//   previous day (it's always the same amount of work -- same formula).
// -----------------------------------------------------------------------------------------

let balances = [];

for (let pid = 1; pid <= doh_max_players; pid++) {
    let player_name = players[pid - 1];
    let bal = cth_cleos_pipe(`get table tokens.${tcn_target} ${player_name} accounts | jq .rows[0].balance | tr -d '"'`);
    console.log(`Player ${pid} ('${player_name}') balance: ${bal}`);
    bal = doh_extract_tcn_amount(bal);
    balances.push(bal);
}

// check that the TCN amount is the same as the reference value (extracted from one range of players that
//   worked 1 to 5 times) -- except for the last player, which swipes the fund and has to test for >= instead of ==

// NOT the case; day 1 work is lost; it's day 2 work that counts
// player 1 is a garbage amount (must be same as 2)
//cth_assert(`player 1 worked the same as player 2`, `${balances[0]} == ${balances[1]}`) ? failed() : null;

// Get reference values from players 1-5
let ref_bals = [];
for (let pid = 1; pid <= 5; pid++) {
    ref_bals.push(balances[pid - 1]);
}

// Check players 6 to 29 against the reference values
for (let pid = 6; pid <= doh_max_players - 1; pid++) {
    let ref_bal_idx = (pid - 1) % 5;
    let times_worked = ref_bal_idx + 1;
    let expected_tcn = ref_bals[ref_bal_idx];
    let bal_tcn = balances[pid - 1];
    cth_assert(`player ${pid} worked ${times_worked} times, so TCN ${bal_tcn} is expected to be equal to ${expected_tcn}`, `${bal_tcn} == ${expected_tcn}`) ? failed() : null;
}

// Check last player is greater or equal to the expected reference
let ref_bal_idx = (doh_max_players - 1) % 5;
let expected_tcn = ref_bals[ref_bal_idx];
let bal_tcn = balances[doh_max_players - 1];
cth_assert(`last player ${doh_max_players} TCN ${bal_tcn} is greater or equal than reference ${expected_tcn}`, `${bal_tcn} >= ${expected_tcn}`) ? failed() : null;

// --------------------------------------------------------------------------------------------
// Test done
// --------------------------------------------------------------------------------------------

finish();

console.log("TEST: completed successfully.\n");
