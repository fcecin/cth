#!/usr/bin/perl

# --------------------------------------------------------------------------------------------
# cth: Contract Test Harness for Antelope
#
# Run "cth -h" for help.
#
# Project repository: https://github.com/fcecin/cth
#
# cth runs all the tests or a subset of them.
#
# cth also initializes all tools and drivers if run with "cth -i".
# --------------------------------------------------------------------------------------------
#
# Driver development tips:
#
# The optional 'install' script that be in the driver's directory should be used to for
#   example one-time compile any contracts that the driver will be deploying over and
#   over again to a blockchain. Any one-time task, done after cloning the test harness
#   is good to go here.
#
# The optional 'reset' script in a driver should clean it up to a default state wherein
#   you e.g. would be required to 'install' it again afterwards. This could for example
#   clean/delete the build directories of contracts.
#
# Drivers should start with something like a 'start' script, and be stopped with
#   something like a 'stop' script. Start/stop (or whatever other) driver controls are
#   not required by cth; instead these are the interface called by each test to control
#   the driver(s) that it uses. Parallel test runs require a driver that can take a
#   command from a test that gives the test itself as e.g. the blockchain data directory.
#   Other tests may require a driver that is smart enough to preserve the same running
#   blockchain and contract deployment between tests (for whatever reason).
#
# A 'clear' script should usually require the driver to be "stopped" (or force stop),
#   since it should deal with wiping the driver's data files (such as blockchain state
#   generated by test activity.
#
# Drivers that need global configuration before they are run can provide a 'configure'
#   tool. The configure tool can be anything the driver needs. This is also not called
#   by cth and concerns only the tests that use it.
#
# TODO:
#
# Currently, there are no options to directly start, stop, reset, install or clear
#   individual drivers. There are also no options to clear individual tests. You can
#   however just change into the driver or test directory and run these directly.
#
# Remote testing via -s cleos_url=http://api.chain.com
#
# SNAPSHOT (HOT) TESTING:
#
# This is very simple. The easiest driver just resumes a binary chainbase that
#   we save (i.e. data dir) provided it isn't too big. But a snapshot would have
#   the same size, I guess. Push comes to shove, the chainbase can be zipped, and
#   the driver install step (or the run step even) can unzip it. This template
#   chainbase is then cp -r wherever we start a new nodeos to test with.
#
# PARALLEL TESTING:
#
# Use of -o and -s for a parallel testing driver.
# Tests serialize if given ANY cleos_url, otherwise they fire up their own
#   local instances (you can't fire random remote instances unless you
#   parallelize via multiple blockchains and/or multiple identical contract targets).
#
# --------------------------------------------------------------------------------------------
#
# tools/cth-goodies
# perl library
#
# tools/doh-goodies
# perl library
#
# --------------------------------------------------------------------------------------------

use strict;
use warnings;
use Digest::SHA qw(sha256_hex);
use Getopt::Long;
use Cwd;

# --------------------------------------------------------------------------------------------
# Variables
# --------------------------------------------------------------------------------------------

my $root_dir = getcwd();

my $tests_dir = "tests";

my $drivers_dir = "drivers";

my $global_test_args = '';    # Uniform parameterization of the ENTIRE test suite that is run

my @tests;           # All subdirectories under tests/

my @drivers;         # All subdirectories under drivers/

my @testspecs;       # List of testspecs passed on the command line

my $sum_total = 0;
my $sum_fail = 0;
my $sum_pass = 0;

my @sum_passed_tests;
my @sum_failed_tests;

# --------------------------------------------------------------------------------------------
# Command-line parser
# --------------------------------------------------------------------------------------------

# Options
my @opt_option;       # each element of these two outer arrays is a 
my @opt_switch;       #  2-element array that contains the key and value pair. 
my $opt_clear = 0;
my $opt_help = 0;
my $opt_install = 0;
my $opt_reset = 0;
my $opt_verbose = 0;

GetOptions(
    "clear|c"      => \$opt_clear,
    "help|h"       => \$opt_help,
    "install|i"    => \$opt_install,
    "option|o=s%"  => sub { push @opt_option, [$_[1], $_[2]] },
    "reset"        => \$opt_reset,
    "switch|s=s%"  => sub { push @opt_switch, [$_[1], $_[2]] },
    "verbose|v"    => \$opt_verbose,
) or die "ERROR: cth: Error in command line arguments.\n";

# keys must be azAZ09_ only
foreach my $pair (@opt_switch) {
    my ($key, $value) = @$pair;
    unless ($key =~ /^[a-zA-Z0-9_]+$/) {
        die "ERROR: Invalid characters in test switch key (allowed: a-z, A-Z, 0-9, _): \"$key\"\n";
    }
}
foreach my $pair (@opt_option) {
    my ($key, $value) = @$pair;
    unless ($key =~ /^[a-zA-Z0-9_]+$/) {
        die "ERROR: Invalid characters in test option key (allowed: a-z, A-Z, 0-9, _): \"$key\"\n";
    }
}

@testspecs = @ARGV;

if ($opt_help) {
    #      ................................................................................
    print "cth: Contract Test Harness for Antelope\n";
    print "\n";
    print "Usage:\n";
    print "  cth [OPTIONS] [TESTSPECS]\n";
    print "\n";
    print "Examples:\n";
    print "  Run all tests:\n";
    print "    cth\n";
    print "  Run only specific tests (name filters):\n";
    print "    cth testname1 test2 othertestname\n";
    print "  Install drivers and run no tests:\n";
    print "    cth -i bogustest\n";
    print "  Run all cth-goodies tests against a public testnet:\n";
    print "    cth -s cleos_url=https://testnet.uxnetwork.io\n";
    print "\n";
    print "Options:\n";
    print "\n";
    print "  --clear, -c         Clear all tests and drivers\n";
    print "  --help, -h          Print this help\n";
    print "  --install, -i       Run 'install' on all drivers\n";
    print "  --option, -o <k=v>  Pass a '-o \"k=v\"' parameter to all tests\n";
    print "                      (note: switches are preferred over options)\n";
    print "  --reset             Run 'reset' on all drivers\n";
    print "  --switch, -s <k=v>  Pass a '--k \"v\"' parameter to all tests\n";
    print "  --verbose, -v       Print more messages\n";
    print "\n";
    exit;
}

# --------------------------------------------------------------------------------------------
# Starting up
# --------------------------------------------------------------------------------------------

if ($opt_verbose) { print "Working directory (test root): $root_dir\n"; }

# --------------------------------------------------------------------------------------------
# Get a list of all drivers
# --------------------------------------------------------------------------------------------

{
    opendir(my $dh, $drivers_dir) or die "ERROR: cth: Cannot open drivers directory $drivers_dir: $!";
    if ($opt_verbose) { print "Searching for drivers in $root_dir/$drivers_dir ...\n"; }
    while (my $entry = readdir($dh)) {
        next if $entry eq '.' || $entry eq '..';
        push @drivers, $entry if -d "$drivers_dir/$entry";
    }
    closedir($dh);

    if (scalar(@drivers) == 0) {
        print "WARNING: No driver directories found.\n";
    } else {
        @drivers = sort @drivers;
        if ($opt_verbose) {
            print "Found drivers: ";
            my $first = 1;
            foreach my $driver (@drivers) {
                if (!$first) { print ", "; } else { $first = 0; }
                print "$driver";
            }
            print "\n";
        }
    }
}

# --------------------------------------------------------------------------------------------
# Check if we are going to --reset all drivers
# --------------------------------------------------------------------------------------------

if ($opt_reset) {
    if ($opt_verbose) { print "Running 'reset' on all drivers ...\n"; }
    foreach my $driver (@drivers) {
        my $work_dir = "$drivers_dir/$driver";
        chdir $work_dir or die "ERROR: cth: Cannot change into driver directory: $!";
        my $script = "reset";
        if (-e $script) {
            my $log_file = "reset.log";
            unlink $log_file;
            print "Running reset script for driver $driver (output: $work_dir/$log_file) ...\n";
            my $ret = system($script . " > $log_file 2>&1");
            if ($ret) {
                print "Driver $driver reset failed with code: $ret\n";
            } else {
                print "Driver $driver reset successfully.\n";
            }
        } else {
            print "Driver $driver has no reset script.\n";
        }
        chdir $root_dir or die "ERROR: cth: Cannot change to root test directory: $!";
    }
}

# --------------------------------------------------------------------------------------------
# Check if we are going to --install all drivers
# --------------------------------------------------------------------------------------------

if ($opt_install) {
    print "Running 'install' on all drivers ...\n";
    foreach my $driver (@drivers) {
        my $work_dir = "$drivers_dir/$driver";
        chdir $work_dir or die "ERROR: cth: Cannot change into driver directory: $!";
        my $script = "install";
        if (-e $script) {
            my $log_file = "install.log";
            unlink $log_file;
            print "Running install script for driver $driver (output: $work_dir/$log_file) ...\n";
            my $ret = system($script . " > $log_file 2>&1");
            if ($ret) {
                print "Driver $driver installation failed with code: $ret\n";
            } else {
                print "Driver $driver installed successfully.\n";
            }
        } else {
            print "Driver $driver has no install script.\n";
        }
        chdir $root_dir or die "ERROR: cth: Cannot change to root test directory: $!;"
    }
}

# --------------------------------------------------------------------------------------------
# Find all tests.
# --------------------------------------------------------------------------------------------

{
    opendir(my $dh, $tests_dir) or die "ERROR: cth: Cannot open tests directory $tests_dir: $!";
    if ($opt_verbose) { print "Searching for tests in $root_dir/$tests_dir ...\n"; }
    while (my $entry = readdir($dh)) {
        next if $entry eq '.' || $entry eq '..';
        push @tests, $entry if -d "$tests_dir/$entry";
    }
    closedir($dh);

    if (scalar(@tests) == 0) {
        print "WARNING: No test directories found.\n";
    } else {
        @tests = sort @tests;
        if ($opt_verbose) {
            print "Found tests: ";
            my $first = 1;
            foreach my $test (@tests) {
                if (!$first) { print ", "; } else { $first = 0; }
                print "$test";
            }
            print "\n";
        }
    }
}

# --------------------------------------------------------------------------------------------
# Check if we are going to --clear all tests and drivers
# --------------------------------------------------------------------------------------------

if ($opt_clear) {

    print "Clearing all drivers ...\n";
    foreach my $driver (@drivers) {
        my $work_dir = "$drivers_dir/$driver";
        chdir $work_dir or die "ERROR: cth: Cannot change into driver directory: $!";
        my $script = "clear";
        print "Clearing driver $driver ... ";
        unlink "install.log"; # remove install.log file
        if (-e $script) {
            my $ret = system($script);
            if ($ret) {
                print "ERROR: 'clear' failed for driver $driver with code: $ret\n";
            } else {
                print "\n";
            }
        } else {
            if ($opt_verbose) { print "(no custom 'clear' file)"; }
            print "\n";
        }
        chdir $root_dir or die "ERROR: cth: Cannot change to root test directory: $!;"
    }

    print "Clearing all tests ...\n";
    foreach my $test (@tests) {
        my $work_dir = "$tests_dir/$test";
        chdir $work_dir or die "ERROR: cth: Cannot change into test directory: $!";
        my $script = "clear";
        print "Clearing test $test ... ";
        unlink "run.log"; # remove run.log file
        if (-e $script) {
            my $ret = system($script);
            if ($ret) {
                print "ERROR: 'clear' failed for test $test with code: $ret\n";
            } else {
                print "\n";
            }
        } else {
            if ($opt_verbose) { print "(no custom 'clear' file)"; }
            print "\n";
        }
        chdir $root_dir or die "ERROR: cth: Cannot change to root test directory: $!;"
    }
}

# --------------------------------------------------------------------------------------------
# Run tests
# --------------------------------------------------------------------------------------------

print "Running tests ...\n";
if ($opt_verbose) { print "The output of each test is saved to the 'run.log' file on each test directory.\n"; }
print "\n";

print "Global parameters given to all tests:\n\n";
foreach my $pair (@opt_switch) {
    my ($key, $value) = @$pair;
    print "  Switch: \"$key\" = \"$value\" (--$key \"$value\")\n";
    if ($global_test_args ne '') { $global_test_args .= ' '; }
    $global_test_args .= qq|--$key "$value"|;
}
foreach my $pair (@opt_option) {
    my ($key, $value) = @$pair;
    print "  Option: \"$key\" = \"$value\" (-o \"$key=$value\")\n";
    if ($global_test_args ne '') { $global_test_args .= ' '; }
    $global_test_args .= qq|-o "$key=$value"|;
}
print "\n";
if ($opt_verbose) { print "Parameter string for all tests: $global_test_args\n\n"; }

exit;

foreach my $test (@tests) {

    # check if we will skip this test.
    # if no test names were passed in, that actually means we run all tests without checking
    #    if they are in the list (which is empty)
    if (scalar(@testspecs) != 0) {
        if (!grep { $_ eq $test } @testspecs) { next; } # skip this test if it isn't in the list
    }

    # run the test
    #
    my $work_dir = "$tests_dir/$test";
    chdir $work_dir or die "ERROR: cth: Cannot change into test directory: $!";
    my $script = "run";
    my $log_file = "run.log";
    unlink $log_file;
    print "Test " . $test . " " . ("." x (32 - length($test))) . " ";
    if (-e $script) {
        my $ret = system($script . " " . $global_test_args . " > $log_file 2>&1");
        if ($ret) {
            print "Failed (code: $ret)\n";
            $sum_fail++;
            push @sum_failed_tests, $test;
        } else {
            print "Passed\n";
            $sum_pass++;
            push @sum_passed_tests, $test;
        }
    } else {
        print "Failed (no 'run' file)\n";
        $sum_fail++;
        push @sum_failed_tests, $test;
    }
    chdir $root_dir or die "ERROR: cth: Cannot change to root test directory: $!;"
}

# --------------------------------------------------------------------------------------------
# Print summary
# --------------------------------------------------------------------------------------------

$sum_total = $sum_pass + $sum_fail;

print "\n";
print "-------------\n";
print "Test summary:\n";
print "-------------\n";
print "\n";
print "Passed: $sum_pass\n";
print "Failed: $sum_fail\n";
print "Total run: $sum_total\n";

if ($sum_pass > 0) {
    print "\n";
    print "Passed tests: ";
    my $first = 1;
    foreach my $passed_test (@sum_passed_tests) {
        if (!$first) { print ", "; } else { $first = 0; }
        print $passed_test;
    }
    print "\n";
}

if ($sum_fail > 0) {
    print "\n";
    print "Failed tests: ";
    my $first = 1;
    foreach my $failed_test (@sum_failed_tests) {
        if (!$first) { print ", "; } else { $first = 0; }
        print $failed_test;
    }
    print "\n";
}

print "\n";

if ($sum_fail > 0) {
    exit 1;
}
