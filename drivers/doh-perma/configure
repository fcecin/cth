#!/usr/bin/perl

use strict;
use warnings;
use Getopt::Long;
use File::Path qw(make_path remove_tree);

use FindBin qw($RealBin);
if (!chdir($RealBin)) {
    print "ERROR: Failed to change working directory: $!\n";
    exit 1;
}

my $config_file = "driver.ini";
my %options;

GetOptions(
    "help|h"      => \$options{help},
    "target=s"    => \$options{target},
    "cleos_url=s" => \$options{cleos_url},
    "reset"       => \$options{reset},
    "get=s"       => \$options{get}
) or die "ERROR: invalid command line. Use --help to see usage.";

if ($options{help}) {
    print "Usage: configure [--target=hgm|hg1|hg2|...] [--cleos_url=...][--reset] [--get=target|...] [--help|-h]\n";
    exit;
}

if ($options{reset}) {
    if (-e $config_file) {
        unlink $config_file;
        print "Deleted $config_file\n";
    } else {
        print "$config_file does not exist\n";
    }
    exit;
}

if (-e $config_file) {
    if ($options{get}) {
        my $value = get_key_from_ini($config_file, $options{get});
        print "$value\n" if defined $value;
    } else {
        update_config_in_ini($config_file, \%options);
        print "Content of $config_file:\n";
        print_ini_content($config_file);
    }
} else {
    if ($options{get}) {
        # do/print nothing
    } else {
        create_ini_with_config($config_file, \%options);
        print "Content of $config_file:\n";
        print_ini_content($config_file);
    }
}

sub update_config_in_ini {
    my ($file, $options) = @_;
    my $backup_file = "$file.bak";

    my %new_options;

    open(my $in_fh, "<", $file) or die "ERROR: opening $file: $!";
    open(my $out_fh, ">", $backup_file) or die "ERROR: creating $backup_file: $!";

    while (my $line = <$in_fh>) {
        chomp $line;
        my ($key, $value) = split /\s*=\s*/, $line, 2;
        $new_options{$key} = $value;
    }

    for my $key (keys %$options) {
        if (defined $options->{$key} && $options->{$key} ne "") {
            $new_options{$key} = $options->{$key};
        }
    }

    for my $key (keys %new_options) {
        print $out_fh "$key = " . $new_options{$key} . "\n";
    }

    close($in_fh);
    close($out_fh);

    unlink $file;
    rename $backup_file, $file;
    print "Updated $file\n";
}

sub create_ini_with_config {
    my ($file, $options) = @_;
    open(my $fh, ">", $file) or die "ERROR: creating $file: $!";
    for my $key (keys %$options) {
        if (defined $options->{$key} && $options->{$key} ne "") {
            print $fh "$key = " . $options->{$key} . "\n";
            print "printed in file: $key = " . $options->{$key} . "\n";
        }
    }
    close($fh);
    print "Created $file\n";
}

sub print_ini_content {
    my ($file) = @_;
    open(my $fh, "<", $file) or die "ERROR: opening $file: $!";
    while (my $line = <$fh>) {
        chomp $line;
        print "$line\n";
    }
    close($fh);
}

sub get_key_from_ini {
    my ($file, $key) = @_;
    open(my $fh, "<", $file) or die "Error opening $file: $!";
    while (my $line = <$fh>) {
        chomp $line;
        if ($line =~ /^\s*$key\s*=\s*(.*)/) {
            close($fh);
            return $1;
        }
    }
    close($fh);
    return undef;
}
