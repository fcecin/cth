#!/usr/bin/perl

# --------------------------------------------------------------------------------------------
# Driver: doh-hotstart
# Operation: start
#
# This driver depends on three drivers:
# - coldstart & doh-coldstart: to create a chainbase for a fully-booted and activated
#     Antelope blockchain that has all DoH accounts and contracts deployed. This is done
#     at installation time. At runtime, these dependencies don't exist.
# - cleos-driver: has the wallet file and a running keosd (from /local/cleos-driver/)
#
# The template chainbase is created during driver installation using the (already installed)
#   coldstart and doh-coldstart drivers. cth now understands driver dependencies via the
#   'depends' file.
#
# This driver supports parallel execution. It will create a directory
#   /local/doh-hotstart/instances/<nodeos-p2p-port-number> for a local port that isn't taken,
#   and if it can't create the directory, it will try again until it can find a port
#   number that isn't taken by another hotstart instance (synchronized via folder creation).
#   When successful, that directory will be where the new nodeos will be started. When
#   successful, the allocatedd port number is returned in the last line of output of this
#   script in a well-known format that can be captured by the caller.
#
# The HTTP port number is the P2P port number + 10000 (example: p2p:10000, HTTP:20000).
# --------------------------------------------------------------------------------------------

use strict;
use warnings;
use Time::HiRes qw(sleep);
use Scalar::Util qw(looks_like_number);
use File::Path qw(make_path);

$| = 1;  # Turn on auto-flush for STDOUT (Perl doesn't do this by default)

my $lock_file = "lock_file";

# The paths below is relative to the location of this script (which is the driver's directory)
my $working_dir   = "../../local/doh-hotstart";

# The paths below are relative to the $working_dir which should be the current working dir
my $template_dir  = "nodeos-template";
my $instances_dir = "instances";

my $verbose = 1;

my $target; # passed as command-line argument: --target xxx

# This default can be changed by command-line argument --max_instances xxx or by lscpu (see below)
my $max_instances = 1;

my $cmd;
my $o;

# --------------------------------------------------------------------------------------------
# The working_dir is relative to the script's directory. Make sure to create it, then find it,
#   then change to it.
# --------------------------------------------------------------------------------------------

use Cwd 'abs_path';
use FindBin '$RealBin';

# Compute absolute path to working directory in /local/doh-hotstart
my $abs_working_dir = abs_path("$RealBin/$working_dir");
if (!defined $abs_working_dir) {
    print "ERROR: Malformed abs_working_dir from '$RealBin' + '$working_dir': $!\n";
    exit 1;
}

# Not needed. Also, the installer is the one that creates the $working_dir/lock_file. Not sure if that's needed but it's better in theory.
#
# Create the working directory and its parent directories (should already exist
#   if the driver was successfully installed, but anyway)
#if (!-d $abs_working_dir && !make_path($abs_working_dir)) {
#    print "ERROR: Failed to create path for abs_working_dir '$abs_working_dir': $!\n";
#    exit 1;
#}

# Check that the template dir is there (should have been created by the driver installer)
my $abs_template_dir = abs_path("$abs_working_dir/$template_dir");
if (!defined $abs_template_dir || !-d $abs_template_dir) {
    die "ERROR: doh-hotstart start: nodeos template data dir '$abs_template_dir' directory not found. (Was the doh-hotstart driver installed?)";
}

# Create the instances subdirectory if it's not there
my $abs_instances_dir = abs_path("$abs_working_dir/$instances_dir");
if (!defined $abs_instances_dir || (!-d $abs_instances_dir && !make_path($abs_instances_dir))) {
    print "ERROR: Failed to create path for abs_instances_dir '$abs_instances_dir': $!\n";
    exit 1;
}

# Change into the working dir
if (chdir($abs_working_dir)) {
    if ($verbose) { print "Forced working directory to driver working location: $abs_working_dir\n"; }
} else {
    print "ERROR: Failed to change working directory: $!\n";
    exit 1;
}

# global lock_file should already exist but touch it just to make sure it does (creating it in parallel is less bad
#   than having it not exist at all for some reason).
`touch lock_file`;

# --------------------------------------------------------------------------------------------
# Get the desired DoH compilation target from the command-line.
# --------------------------------------------------------------------------------------------

# include the tools/cth-goodies library
use lib "$RealBin/../../tools/cth-goodies";
use CthGoodies;

print "doh-hotstart start: will now attempt to parse command-line args; single '--target xxx' argument expected with the DoH compilation target.\n";

my ($switches, $options) = cth_standard_args_parser("target max_instances", "");

if (!exists $switches->{'target'}) {
    die "ERROR: doh-hotstart start: required '--target xxx' command-line argument not found.";
}

if ($switches->{'target'} eq 'hgm' || $switches->{'target'} eq 'prod') {
    $target = 'hgm';
} elsif ($switches->{'target'} eq 'hg1' || $switches->{'target'} eq 'staging') {
    $target = 'hg1';
} elsif ($switches->{'target'} eq 'hg2' || $switches->{'target'} eq 'dev') {
    $target = 'hg2';
} elsif ($switches->{'target'} eq 'hg3' || $switches->{'target'} eq 'test') {
    $target = 'hg3';
} else {
    die "ERROR: doh-hotstart start: unknown target: '" . $switches->{'target'} . "'.";
}

print "doh-hotstart start: Configured DoH contracts target: $target\n";

# --------------------------------------------------------------------------------------------
# Determine max_instances configuration.
# --------------------------------------------------------------------------------------------

if (exists $switches->{'max_instances'}) {
    $max_instances = $switches->{'max_instances'};
    if (! $max_instances =~ /^\d+$/) {
        die "ERROR: doh-hotstart start: bad --max_instances parameter: '" . $max_instances . "'.";
    }
} else {
    my $cpus = `lscpu -b -p=Core,Socket | grep -v '^#' | sort -u | wc -l`;
    chomp($cpus);
    if (!defined $cpus || !($cpus =~ /^\d+$/)) {
        print "doh-hotstart start: WARNING: Can't retrieve number of cpu cores; will assume only 1 core.\n";
    } else {
        print "doh-hotstart start: Detected $cpus cpu cores.\n";
        $max_instances = $cpus;
    }
}

print "doh-hotstart start: Configured DoH contracts max_instances: $max_instances\n";

# --------------------------------------------------------------------------------------------
# Create a /local/doh-hotstart/instances/<p2p-port> directory for the new nodeos instance.
# Lock the driver's directory, do these operations, and unlock it.
# Do non-blocking locking and wait for at most e.g. 10 seconds before giving up.
# nuke script destroys all nodeos instances that map to hotstart and erases the lock file.
# Wait indefinitely while $max_instances limit is reached (i.e. the number of <p2p-port>
#   directories is equal or over max_instances); sleep for e.g. 3 seconds between checks.
# --------------------------------------------------------------------------------------------

my @inst_dirs;
my $total_inst_dirs;
my $p2p_port_number;
my $abs_this_inst_dir;

my $nblock_tries = 10;

while (1) {

    # Acquire global lock on instances dir
    open my $lockfile, ">", "$lock_file" or die "FATAL ERROR: Can't acquire lock file: $!";
    if (flock($lockfile, 2 | 4)) {

        # scan instances dir
        opendir(my $dh, "$abs_instances_dir") or die "ERROR: Could not open instances directory: $!";
        @inst_dirs = grep { -d "$abs_instances_dir/$_" && ! /^\.{1,2}$/} readdir($dh);
        closedir($dh);
        $total_inst_dirs = scalar @inst_dirs;
        print "Found $total_inst_dirs instances.\n";

        # if there's room, create our instance, which will use the next available port number
        if ($total_inst_dirs < $max_instances) {

            # find the largest p2p port number among created instances
            my $largest = 9999;
            foreach my $number (@inst_dirs) {
                if ($number > $largest) {
                    $largest = $number;
                }
            }

            # our p2p port number will be the largest + 1
            $p2p_port_number = $largest + 1;

            # so create it (guaranteed that it's not there)
            $abs_this_inst_dir = "$abs_instances_dir/$p2p_port_number";
            if (!make_path($abs_this_inst_dir)) {
                close($lockfile); # unlock before dying
                die "ERROR: Failed to create path for our new instance: '$abs_this_inst_dir': $!\n";
            }
        }

        # unlock
        close($lockfile);

        # if there was room, we are done
        if ($total_inst_dirs < $max_instances) {
            last;
        }

        # otherwise,
        print "doh-hotstart start: max_instances reached ($total_inst_dirs/$max_instances); waiting to try again...\n";
        sleep(3);

    } else {
        # non-blocking lock failed
        $nblock_tries--;
        if ($nblock_tries <= 0) {
            die "FATAL ERROR: Timed out while trying to acquire lock_file\n";
        } else {
            print "doh-hotstart start: lock_file acquisition failed; will try again..\n";
        }

        # try again later
        sleep(1);
    }
}

print "doh-hotstart start: instance directory allocated for my p2p-port $p2p_port_number & my instance dir '$abs_this_inst_dir'\n";

# --------------------------------------------------------------------------------------------
# Ensure cleos-driver is running
# TODO: maybe it always works if cleos-driver start is invoked in parallel, but maybe
#       it doesn't. Test it and confirm.
# --------------------------------------------------------------------------------------------

# TODO

# --------------------------------------------------------------------------------------------
# Copy the chainbase over to this instance's created work dir
# --------------------------------------------------------------------------------------------

print "doh-hotstart start: copying nodeos template from '$abs_template_dir' to my instance dir '$abs_this_inst_dir'\n";
print `cp -r $abs_template_dir/* $abs_this_inst_dir`;
if ($? != 0) {
    die "ERROR: doh-hotstart start: Failed to copy nodeos data directory: $!\n";
}

# --------------------------------------------------------------------------------------------
# Start nodeos from the chainbase
# --------------------------------------------------------------------------------------------

# TODO

# --------------------------------------------------------------------------------------------
# Ensure it has finished starting and a test will be able to send commands to it
# --------------------------------------------------------------------------------------------

# TODO

# --------------------------------------------------------------------------------------------
# Done
# --------------------------------------------------------------------------------------------

print "doh-hotstart start: instance $p2p_port_number started successfully.";
