#!/usr/bin/perl

# --------------------------------------------------------------------------------------------
# Driver: doh-hotstart
# Operation: start
#
# This driver depends on three drivers:
# - coldstart & doh-coldstart: to create a chainbase for a fully-booted and activated
#     Antelope blockchain that has all DoH accounts and contracts deployed. This is done
#     at installation time. At runtime, these dependencies don't exist.
# - cleos-driver: has the wallet file and a running keosd (from /local/cleos-driver/)
#
# The template chainbase is created during driver installation using the (already installed)
#   coldstart and doh-coldstart drivers. cth now understands driver dependencies via the
#   'depends' file.
#
# This driver supports parallel execution. It will create a directory
#   /local/doh-hotstart/instances/<nodeos-p2p-port-number> for a local port that isn't taken,
#   and if it can't create the directory, it will try again until it can find a port
#   number that isn't taken by another hotstart instance (synchronized via folder creation).
#   When successful, that directory will be where the new nodeos will be started. When
#   successful, the allocatedd port number is returned in the last line of output of this
#   script in a well-known format that can be captured by the caller.
#
# The HTTP port number is the P2P port number + 10000 (example: p2p:10000, HTTP:20000).
# --------------------------------------------------------------------------------------------

use strict;
use warnings;
use Time::HiRes qw(sleep);
use Scalar::Util qw(looks_like_number);
use File::Path qw(make_path);
use Socket;
#use Cwd 'abs_path';
use File::Spec::Functions qw(rel2abs);
use FindBin '$RealBin';

$| = 1;  # Turn on auto-flush for STDOUT (Perl doesn't do this by default)

my $lock_file = "lock_file";

# The paths below is relative to the location of this script (which is the driver's directory)
my $working_dir   = "../../local/doh-hotstart";

# The paths below are relative to the $working_dir which should be the current working dir
my $template_dir  = "nodeos-template";
my $instances_dir = "instances";

# This is relative to the driver's working dir, not the driver dir
my $cleos_driver_dir = "../../drivers/cleos-driver"; # /drivers/cleos-driver

my $verbose = 1;

my $target; # passed as command-line argument: --target xxx

my $label; # passed as command-line argument: --label xxx

# This default can be changed by command-line argument --max_instances xxx or by lscpu (see below)
#my $max_instances = 1;

my $nodeos_pid_file = "nodeos.pid";

my $running_nodeos_pid;

my $cmd;
my $o;

# --------------------------------------------------------------------------------------------
# Utils
# --------------------------------------------------------------------------------------------

sub test_port {
    my $port = shift;
    if (! defined $port) { die "ERROR: test_port(): invalid port"; }
    socket(my $sock, PF_INET, SOCK_STREAM, 0) or die "ERROR: CanÂ´t create socket(): $!";
    my $addr = sockaddr_in($port, INADDR_LOOPBACK);
    my $ret;
    if (bind($sock, $addr)) {
        $ret = 1;
    }
    close($sock);
    return $ret; # '1'(true) or undef(false)
}

sub read_from_file {
    my $file_path = shift;
    if (!defined $file_path) { die "ERROR: read_from_file: undefined file_path"; }
    local $/;
    open my $file_handle, '<', $file_path or die "ERROR: read_from_file: Could not open file '$file_path': $!";
    my $string = <$file_handle>;
    close $file_handle;
    $string =~ s/\R\z//;
    return $string;
}

# This actually calls clear
# This driver (doh-hotstart) allows for the creation of multiple nodeos/chainbases, so when a test fails,
#   we can't really have the luxury of letting a bunch of directories available for debug.
# During development of the driver itself, you may want to change this to 'stop' instead of 'clear' to
#   leave the directory with logs etc. that you can inspect.
sub do_stop {
    print "doh-hotstart start: Stopping driver and wiping it clean ('clear')...\n";
    my $clear_script = "$RealBin/clear";
    if (!-e $clear_script) {
        print "ERROR: can't find $clear_script, nodeos not stopped and/or instance dir not cleared\n";
        exit 1;
    } else {
        my $o = `$clear_script  --label $label 2>&1`;
        print "Result: $o\n";
    }
}

# --------------------------------------------------------------------------------------------
# The working_dir is relative to the script's directory. Make sure to create it, then find it,
#   then change to it.
# --------------------------------------------------------------------------------------------

# Compute absolute path to working directory in /local/doh-hotstart
#my $abs_working_dir = abs_path("$RealBin/$working_dir");
#if (!defined $abs_working_dir) {
#    print "ERROR: Malformed abs_working_dir from '$RealBin' + '$working_dir': $!\n";
#    exit 1;
#}
my $abs_working_dir = rel2abs("$RealBin/$working_dir");

# Check that the template dir is there (should have been created by the driver installer)
#my $abs_template_dir = abs_path("$abs_working_dir/$template_dir");
#if (!defined $abs_template_dir) {
#    die "ERROR: doh-hotstart start: cannot compute absolute path to nodeos template data dir '$abs_working_dir/$template_dir'";
#}
my $abs_template_dir = rel2abs("$abs_working_dir/$template_dir");
if (!-d $abs_template_dir) {
    die "ERROR: doh-hotstart start: nodeos template data dir '$abs_template_dir' directory not found. (Was the doh-hotstart driver installed?)";
}

# Create the instances subdirectory if it's not there
#my $abs_instances_dir = abs_path("$abs_working_dir/$instances_dir");
##if (!defined $abs_instances_dir || (!-d $abs_instances_dir && !make_path($abs_instances_dir))) {
##    print "ERROR: Failed to create path for abs_instances_dir '$abs_instances_dir': $!\n";
##    exit 1;
##}
## Unfortunately, the above can fail since multiple hotstart start scripts may be running (parallel tests)
##   and so it fails between !-d and !make_path with a directory already exists error.
#if (!defined $abs_instances_dir) {
#    die "ERROR: Failed to calculate absolute path for abs_instances_dir: $!";
#}
my $abs_instances_dir = rel2abs("$abs_working_dir/$instances_dir");

system("mkdir -p $abs_instances_dir");
if ($? != 0 && $? != 17) {  # neither success nor error "already exists"
    die "ERROR: Failed to create path for abs_instances_dir '$abs_instances_dir': $! ($?)";
}

# Change into the working dir
if (chdir($abs_working_dir)) {
    if ($verbose) { print "Forced working directory to driver working location: $abs_working_dir\n"; }
} else {
    print "ERROR: Failed to change working directory: $!\n";
    exit 1;
}

# global lock_file should already exist but touch it just to make sure it does (creating it in parallel is less bad
#   than having it not exist at all for some reason).
`touch lock_file`;

# --------------------------------------------------------------------------------------------
# While we are in a well-behaved directory depth, set up the cleos helper, as we will
#   actually need it at the tail end of this script.
# --------------------------------------------------------------------------------------------

use lib "$RealBin/../../tools/cth-goodies";
use CthGoodies;

my $err = cth_set_cleos_provider('cleos-driver');
if ($err) {
    die "ERROR: doh-hotstart start: cth_set_cleos_provider failed for some reason.\n";
}

# --------------------------------------------------------------------------------------------
# Parse command-line arguments.
# --------------------------------------------------------------------------------------------

my ($switches, $options) = cth_standard_args_parser("target label", ""); # max_instances switch removed

# --------------------------------------------------------------------------------------------
# Get the test label.
# --------------------------------------------------------------------------------------------

if (exists $switches->{'label'} && $switches->{'label'} ne '') {
    $label = $switches->{'label'};
    print "doh hotstart start: Test label (unique identifier): '$label'\n";
} else {
    die "ERROR: doh-hotstart start: --label <test-UID> is a required argument.\n";
}

# --------------------------------------------------------------------------------------------
# Get the desired DoH compilation target from the command-line.
# --------------------------------------------------------------------------------------------

print "doh-hotstart start: will now attempt to parse command-line args; single '--target xxx' argument expected with the DoH compilation target.\n";

if (!exists $switches->{'target'}) {
    die "ERROR: doh-hotstart start: required '--target xxx' command-line argument not found.";
}

if ($switches->{'target'} eq 'hgm' || $switches->{'target'} eq 'prod') {
    $target = 'hgm';
} elsif ($switches->{'target'} eq 'hg1' || $switches->{'target'} eq 'staging') {
    $target = 'hg1';
} elsif ($switches->{'target'} eq 'hg2' || $switches->{'target'} eq 'dev') {
    $target = 'hg2';
} elsif ($switches->{'target'} eq 'hg3' || $switches->{'target'} eq 'test') {
    $target = 'hg3';
} elsif ($switches->{'target'} eq 'hg4' || $switches->{'target'} eq 'debug') {
    $target = 'hg4';
} else {
    die "ERROR: doh-hotstart start: unknown target: '" . $switches->{'target'} . "'.";
}

print "doh-hotstart start: Configured DoH contracts target: $target\n";

# --------------------------------------------------------------------------------------------
# Determine max_instances configuration.
# --------------------------------------------------------------------------------------------

#if (exists $switches->{'max_instances'}) {
#    $max_instances = $switches->{'max_instances'};
#    if (! $max_instances =~ /^\d+$/) {
#        die "ERROR: doh-hotstart start: bad --max_instances parameter: '" . $max_instances . "'.";
#    }
#} else {
#    my $cpus = `lscpu -b -p=Core,Socket | grep -v '^#' | sort -u | wc -l`;
#    chomp($cpus);
#    if (!defined $cpus || !($cpus =~ /^\d+$/)) {
#        print "doh-hotstart start: WARNING: Can't retrieve number of cpu cores; will assume only 1 core.\n";
#    } else {
#        print "doh-hotstart start: Detected $cpus cpu cores.\n";
#        $max_instances = $cpus;
#    }
#}
#
#print "doh-hotstart start: Configured DoH contracts max_instances: $max_instances\n";

# --------------------------------------------------------------------------------------------
# Ensure cleos-driver is running.
# cleos-driver start should be able to handle being invoked in parallel by multiple
#   processes (e.g. copies of doh-hostart start) gracefully.
# --------------------------------------------------------------------------------------------

print "Starting cleos-driver ...\n";

$cmd = "$cleos_driver_dir/start";
$o = `$cmd`;
if ($? != 0) {
    print "ERROR: cleos-driver start returned an error code.\n";
    print "Output: $o\n";
    exit 1;
} else {
    print "cleos-driver output: $o\n";
}

# --------------------------------------------------------------------------------------------
# Create a /local/doh-hotstart/instances/<p2p-port> directory for the new nodeos instance.
# Lock the driver's directory, do these operations, and unlock it.
# Do non-blocking locking and wait for at most e.g. 10 seconds before giving up.
# --------------------------------------------------------------------------------------------

my @inst_dirs;
my $total_inst_dirs;
my $p2p_port_number;
my $http_port_number;
my $abs_this_inst_dir;

my $max_nblock_tries = 10;
my $nblock_tries = $max_nblock_tries;

while (1) {

    # Acquire global lock on instances dir
    open my $lockfile, ">", "$lock_file" or die "FATAL ERROR: Can't acquire lock file: $!";
    if (flock($lockfile, 2 | 4)) {

        # only relevant when we're using $max_instances
        # reset the non-blocking lock max tries for next time
        #$nblock_tries = $max_nblock_tries;

        # scan instances dir
        opendir(my $dh, "$abs_instances_dir") or die "ERROR: Could not open instances directory: $!";
        @inst_dirs = grep { -d "$abs_instances_dir/$_" && ! /^\.{1,2}$/} readdir($dh);
        closedir($dh);
        $total_inst_dirs = scalar @inst_dirs;
        print "Found $total_inst_dirs instances.\n";

        # if there's room, create our instance, which will use the next available port number
        #if ($total_inst_dirs < $max_instances) {

            # find the largest p2p port number among created instances
            my $largest = 10000; # start from 10001 since coldstart actually uses 10000
            foreach my $number (@inst_dirs) {
                if ($number > $largest) {
                    $largest = $number;
                }
            }

            # scan for available local TCP listen port numbers starting from the largest found + 1
            $p2p_port_number = $largest + 1;
            $http_port_number = $p2p_port_number + 10000;
            while (!test_port($p2p_port_number) || !test_port($http_port_number)) {
                $p2p_port_number++;
                $http_port_number++;
            }

            # so create it (guaranteed that it's not there)
            $abs_this_inst_dir = "$abs_instances_dir/$p2p_port_number";
            if (!make_path($abs_this_inst_dir)) {
                close($lockfile); # unlock before dying
                die "ERROR: Failed to create path for our new instance: '$abs_this_inst_dir': $!\n";
            }

            # write the unique label there
            `echo -n '$label' > $abs_this_inst_dir/label`;
            if ($? != 0) {
                close($lockfile); # unlock before dying
                die "ERROR: Failed to create label file for our new instance: '$abs_this_inst_dir/label': $!\n";
            }
        #}

        # unlock
        close($lockfile);

        # if there was room, we are done
        #if ($total_inst_dirs < $max_instances) {
            last;
        #}

        # otherwise,
        #print "doh-hotstart start: max_instances reached ($total_inst_dirs/$max_instances); waiting to try again...\n";
        #sleep(3);

    } else {
        # non-blocking lock failed
        $nblock_tries--;
        if ($nblock_tries <= 0) {
            die "FATAL ERROR: Timed out while trying to acquire lock_file\n";
        } else {
            print "doh-hotstart start: lock_file acquisition failed; will try again..\n";
        }

        # try again later
        sleep(1);
    }
}

print "doh-hotstart start: instance directory allocated for my p2p-port $p2p_port_number & my instance dir '$abs_this_inst_dir'\n";

# --------------------------------------------------------------------------------------------
# From here on, any fatal errors will require us to clean up this instance (via do_stop()).
# Can't just leave the directories up (or a half-baked nodeos for that matter).
# Tests calling drivers only clean up after themselves, not the drivers.
# --------------------------------------------------------------------------------------------

# Change into the instance's dir
if (!chdir($abs_this_inst_dir)) {
    print "ERROR: Failed to change working directory to 'abs_this_inst_dir': $!\n";
    do_stop();
    exit 1;
}

# --------------------------------------------------------------------------------------------
# Copy the chainbase over to this instance's created work dir
# --------------------------------------------------------------------------------------------

print "doh-hotstart start: copying nodeos template from '$abs_template_dir' to my instance dir '$abs_this_inst_dir'\n";
print `cp -r $abs_template_dir/* $abs_this_inst_dir`;
if ($? != 0) {
    print "ERROR: doh-hotstart start: Failed to copy nodeos data directory: $!\n";
    do_stop();
    exit 1;
}

# --------------------------------------------------------------------------------------------
# Change the config.ini from the template to use the P2P port and HTTP port allocated for
#   this new instance.
# --------------------------------------------------------------------------------------------

`sed -i 's/http-server-address = .*/http-server-address = 127.0.0.1:$http_port_number/g; s/p2p-listen-endpoint = .*/p2p-listen-endpoint = 127.0.0.1:$p2p_port_number/g' config.ini`;
if ($? != 0) {
    print "ERROR: doh-hotstart start: Failed to update config.ini with correct instance port numbers: $!\n";
    do_stop();
    exit 1;
}

# --------------------------------------------------------------------------------------------
# Start nodeos from the chainbase
# --------------------------------------------------------------------------------------------

$cmd = 'start_nodeos.sh';

print "Starting nodeos...\n";
print "Command: $cmd\n";

$o = `$cmd 2>&1`;

if ($? != 0) {
    print "Result: $o\n";
    print "ERROR: doh-hotstart start: failed to start nodeos (`start_nodeos.sh` failed).\n";
    do_stop();
    exit 1;
}

print "doh-hotstart start: Trying to read nodeos PID from $nodeos_pid_file ...\n";

$running_nodeos_pid = read_from_file($nodeos_pid_file);

print "doh-hotstart start: nodeos PID is $running_nodeos_pid ...\n";

# --------------------------------------------------------------------------------------------
# Check that the nodeos process is actually there
# --------------------------------------------------------------------------------------------

# To test nodeos process dying quickly
#`kill -9 $running_nodeos_pid`;

# Sleep a tiny bit before checking if nodeos is alive, helps to diagnose insta-deaths
#   sooner (instead of cleos connection exception later in the test)
sleep(0.2);

if (kill(0, $running_nodeos_pid)) {
    print "doh-hotstart start: It SEEMS that nodeos is started successfully; nodeos log: $abs_this_inst_dir/chain.log\n";
} else {
    print "ERROR: doh-hotstart start: nodeos failed to start, as PID $running_nodeos_pid doesn't seem to be alive. The chain.log was:\n";
    print "\n==== chain.log start =====\n";
    print `cat chain.log`;
    print "\n==== chain.log end =====\n";
    do_stop();
    exit 1;
}

# --------------------------------------------------------------------------------------------
# Since the hotstart strategy starts from an existing chainbase and so is too fast, we need
#   to loop trying to connect to the HTTP port, to see if nodeos is already up. We don't
#   want to do some ugly sleep(1) here.
# If we don't do this, the test will explode the first time it tries to call cleos since
#   nodeos takes some time to be ready to respond to cleos requests.
# --------------------------------------------------------------------------------------------

cth_set_cleos_url("http://127.0.0.1:$http_port_number");

my $max_tries = 30;  # 30 x 0.2s = 6 seconds

while (1) {
    my $out = cth_cleos_pipe("get info");
    if (defined $out && $out =~ /chain_id/) {
        # seems like cleos get info is working on our nodeos instance
        print "doh-hotstart start: nodeos is alive (responded to cleos get info)\n";
        last;
    }

    # did not find it yet, sleep a bit and retry (or give up if too many retries)
    $max_tries--;
    if ($max_tries <= 0) {
        print "ERROR: doh-hotstart start: nodeos is taking too long to allow cleos get info to go through, assuming it is dead.\n";
        do_stop();
        exit 1;
    }
    sleep(0.2);
}

# --------------------------------------------------------------------------------------------
# Unfortunately, we still need to sleep more, to avoid "expired transaction" errors for
#   some dumb reason. Looks like nodeos is still warming up at this point.
# --------------------------------------------------------------------------------------------

print "doh-hotstart start: sleeping for 1s to avoid Expired Transaction errors...\n";
sleep(1);

# --------------------------------------------------------------------------------------------
# Done
# --------------------------------------------------------------------------------------------

print "doh-hotstart start: instance $p2p_port_number started successfully.\n";
