#!/usr/bin/perl

# --------------------------------------------------------------------------------------------
# Driver: doh-hotstart
# Operation: start
#
# This driver depends on three drivers:
# - coldstart & doh-coldstart: to create a chainbase for a fully-booted and activated
#     Antelope blockchain that has all DoH accounts and contracts deployed. This is done
#     at installation time. At runtime, these dependencies don't exist.
# - cleos-driver: has the wallet file and a running keosd (from /local/cleos-driver/)
#
# The template chainbase is created during driver installation using the (already installed)
#   coldstart and doh-coldstart drivers. cth now understands driver dependencies via the
#   'depends' file.
#
# This driver supports parallel execution. It will create a directory
#   /local/doh-hotstart/instances/<nodeos-p2p-port-number> for a local port that isn't taken,
#   and if it can't create the directory, it will try again until it can find a port
#   number that isn't taken by another hotstart instance (synchronized via folder creation).
#   When successful, that directory will be where the new nodeos will be started. When
#   successful, the allocatedd port number is returned in the last line of output of this
#   script in a well-known format that can be captured by the caller.
#
# The HTTP port number is the P2P port number + 10000 (example: p2p:10000, HTTP:20000).
#
# TODO: take target ("hg3" or "test") as argument.
# --------------------------------------------------------------------------------------------

use strict;
use warnings;
use Time::HiRes qw(sleep);
use Scalar::Util qw(looks_like_number);
use File::Path qw(make_path);

$| = 1;  # Turn on auto-flush for STDOUT (Perl doesn't do this by default)

# The path below is relative to the location of this script (which is the driver's directory)
my $working_dir = "../../local/doh-hotstart";

my $verbose = 1;

my $target; # passed as command-line argument: --target xxx

# This default can be changed by command-line argument --max_instances xxx or by lscpu (see below)
my $max_instances = 1;

my $cmd;
my $o;

# --------------------------------------------------------------------------------------------
# The working_dir is relative to the script's directory. Make sure to create it, then find it,
#   then change to it.
# --------------------------------------------------------------------------------------------

use Cwd 'abs_path';
use FindBin '$RealBin';
my $abs_working_dir = abs_path("$RealBin/$working_dir");
if (!defined $abs_working_dir) {
    print "ERROR: Malformed abs_working_dir from '$RealBin' + '$working_dir': $!\n";
    exit 1;
}

# Create the directory and its parent directories
if (!-d $abs_working_dir && !make_path($abs_working_dir)) {
    print "ERROR: Failed to create path for abs_working_dir '$abs_working_dir': $!\n";
    exit 1;
}

if (chdir($abs_working_dir)) {
    if ($verbose) { print "Forced working directory to driver working location: $abs_working_dir\n"; }
} else {
    print "ERROR: Failed to change working directory: $!\n";
    exit 1;
}

# --------------------------------------------------------------------------------------------
# Get the desired DoH compilation target from the command-line.
# --------------------------------------------------------------------------------------------

# include the tools/cth-goodies library
use lib "$RealBin/../../tools/cth-goodies";
use CthGoodies;

print "doh-hotstart start: will now attempt to parse command-line args; single '--target xxx' argument expected with the DoH compilation target.\n";

my ($switches, $options) = cth_standard_args_parser("target max_instances", "");

if (!exists $switches->{'target'}) {
    die "ERROR: doh-hotstart start: required '--target xxx' command-line argument not found.";
}

if ($switches->{'target'} eq 'hgm' || $switches->{'target'} eq 'prod') {
    $target = 'hgm';
} elsif ($switches->{'target'} eq 'hg1' || $switches->{'target'} eq 'staging') {
    $target = 'hg1';
} elsif ($switches->{'target'} eq 'hg2' || $switches->{'target'} eq 'dev') {
    $target = 'hg2';
} elsif ($switches->{'target'} eq 'hg3' || $switches->{'target'} eq 'test') {
    $target = 'hg3';
} else {
    die "ERROR: doh-hotstart start: unknown target: '" . $switches->{'target'} . "'.";
}

print "doh-hotstart start: Configured DoH contracts target: $target\n";

# --------------------------------------------------------------------------------------------
# Determine max_instances configuration.
# --------------------------------------------------------------------------------------------

if (exists $switches->{'max_instances'}) {
    $max_instances = $switches->{'max_instances'};
    if (! $max_instances =~ /^\d+$/) {
        die "ERROR: doh-hotstart start: bad --max_instances parameter: '" . $max_instances . "'.";
    }
} else {
    my $cpus = `lscpu -b -p=Core,Socket | grep -v '^#' | sort -u | wc -l`;
    chomp($cpus);
    if (!defined $cpus || !($cpus =~ /^\d+$/)) {
        print "doh-hotstart start: WARNING: Can't retrieve number of cpu cores; will assume only 1 core.\n";
    } else {
        print "doh-hotstart start: Detected $cpus cpu cores.\n";
        $max_instances = $cpus;
    }
}

print "doh-hotstart start: Configured DoH contracts max_instances: $max_instances\n";

# --------------------------------------------------------------------------------------------
# Check that the chainbase has been generated during install
# --------------------------------------------------------------------------------------------

# TODO

# --------------------------------------------------------------------------------------------
# Create a /local/doh-hotstart/instances/<p2p-port> directory for the new nodeos instance.
# Lock the driver's directory, do these operations, and unlock it.
# Do non-blocking locking and wait for at most e.g. 10 seconds before giving up.
# nuke script destroys all nodeos instances that map to hotstart and erases the lock file.
# Wait indefinitely while $max_instances limit is reached (i.e. the number of <p2p-port>
#   directories is equal or over max_instances); sleep for e.g. 3 seconds between checks.
# --------------------------------------------------------------------------------------------

# TODO

# --------------------------------------------------------------------------------------------
# Ensure cleos-driver is running
# TODO: maybe it always works if cleos-driver start is invoked in parallel, but maybe
#       it doesn't. Test it and confirm.
# --------------------------------------------------------------------------------------------

# TODO


# --------------------------------------------------------------------------------------------
# Copy the chainbase over to this instance's created work dir
# --------------------------------------------------------------------------------------------

# TODO

# --------------------------------------------------------------------------------------------
# Start nodeos from the chainbase
# --------------------------------------------------------------------------------------------

# TODO

# --------------------------------------------------------------------------------------------
# Ensure it has finished starting and a test will be able to send commands to it
# --------------------------------------------------------------------------------------------

# TODO

# --------------------------------------------------------------------------------------------
# Done
# --------------------------------------------------------------------------------------------

# FIXME/TODO
die "NOT IMPLEMENTED";

