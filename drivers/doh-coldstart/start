#!/usr/bin/perl

use strict;
use warnings;

# --------------------------------------------------------------------------------------------
# Driver: doh-coldstart
# Operation: start
#
# This driver depends on two other drivers:
# - coldstart: runs nodeos
# - cleos-driver: has the wallet file and a running keosd  (from /local/cleos-driver/)
#
# This will check the configured target (hgm, hg1, hg2, ...)
# Then it will load the contracts map
# Then it will extract the contract names and the contract code to deploy for each
# Then it will deploy the contracts to the correct accounts with the correct names
#   (accounts that have no code will be created also)
# Then TODO/FIXME extra general steps that apply to all tests ("init" calls, etc.)
#   - probably starting "deterministic mode" goes here
#   - also probably token creation and setting authorities
#
# This driver does not load any data files. It only does common initialization.
# The testcase will have its own libraries/tools that load e.g. common data files or
#     do common setup tasks for the kind of test that it is.
# --------------------------------------------------------------------------------------------

$| = 1;  # Turn on auto-flush for STDOUT (Perl doesn't do this by default)

my $verbose = 0;

my $coldstart_dir    = "../coldstart";
my $cleos_driver_wallet_dir = "../../local/cleos-driver";

my $cleos = "cleos --wallet-url unix://$cleos_driver_wallet_dir/keosd.sock";

my $target; # passed as command-line argument: --target xxx

my $cmd;
my $o;

# --------------------------------------------------------------------------------------------
# We have to force the working directory to where the driver script is
# --------------------------------------------------------------------------------------------

use FindBin qw($RealBin);
if (chdir($RealBin)) {
    if ($verbose) { print "Forced working directory to driver start script location: $RealBin\n"; }
} else {
    print "ERROR: Failed to change working directory: $!\n";
    exit 1;
}

# -------------------------------------------------------------------------
# Utils
# -------------------------------------------------------------------------

sub load_file {
    my $file_path = shift;
    if (!defined $file_path) { die "ERROR: load_file: undefined file_path\n"; }
    open my $fh, '<', $file_path or die "ERROR: load_file: Failed to open file: $!";
    my $content = do { local $/; <$fh> };
    close $fh;
    return $content;
}

# clear the backing coldstart driver and exits
sub fail {
    my $msg = shift;
    if (defined $msg) { print $msg; }
    print "Clearing coldstart ...\n";
    $cmd = "$coldstart_dir/clear";
    $o = `$cmd`;
    if ($? != 0) {
        print "ERROR: coldstart clear returned an error code.\n";
        print "Output: $o\n";
    }
    exit 1;
}

# This is called after coldstart is started; any failure results in stopping
#   the backing driver.
sub command {
    my $cmd_arg = shift; # the command to run
    if (!defined $cmd_arg) { die "ERROR: command: undefined cmd_arg"; }

    my $cmd = "$cmd_arg 2>&1";

    my $o = `$cmd`;

    if ($? != 0) {
        print "ERROR: Failed to execute: $cmd\n";
        print "Output: $o\n";
        fail();
    }
    #else {
    #    print "Command: $cmd\n";
    #    print "Output: $o\n";
    #}
}

# Convert given decoded JSON data structure to string
sub to_json_string {
    my ($data) = @_;
    if (ref($data) eq 'HASH') {
        my @sorted_keys = sort keys %$data;
        my $json_string = '{';
        foreach my $key (@sorted_keys) {
            my $value = $data->{$key};
            if (ref($value) eq 'HASH') {
                $json_string .= qq("$key":) . to_json_string($value) . ',';
            } elsif (ref($value) eq 'ARRAY') {
                $json_string .= qq("$key":) . to_json_string_array($value) . ',';
            } else {
                $value =~ s/"/\\"/g;
                $json_string .= qq("$key":"$value",);
            }
        }
        $json_string =~ s/,$/}/;
        return $json_string;
    } elsif (ref($data) eq 'ARRAY') {
        return to_json_string_array($data);
    }
    # Scalar value (not a reference)
    $data =~ s/"/\\"/g;
    return qq("$data");
}

# Function to convert an array to JSON string
sub to_json_string_array {
    my ($array) = @_;
    my $json_string = '[';
    foreach my $element (@$array) {
        if (ref($element) eq 'HASH') {
            $json_string .= to_json_string($element) . ',';
        } elsif (ref($element) eq 'ARRAY') {
            $json_string .= to_json_string_array($element) . ',';
        } else {
            $element =~ s/"/\\"/g;
            $json_string .= qq("$element",);
        }
    }
    $json_string =~ s/,$//; # Remove the trailing comma
    $json_string .= ']';
    return $json_string;
}

# -------------------------------------------------------------------------
# Load JSON_Tiny from tools/
# -------------------------------------------------------------------------

# Assuming the JSON_Tiny library is cloned in ../../tools/JSON-Tiny
use lib '../../tools/JSON-Tiny/lib';

# Load the JSON_Tiny module
use JSON::Tiny;

# --------------------------------------------------------------------------------------------
# Recycle cth_standard_args_parser() to process switches passed to this test driver starter.
# We'll use the "target" switch ("start --target=xxx") to allow the caller to configure
#   this driver session to use a specific target.
#
# NOTE: The underlying driver 'coldstart' doesn't care, as it has already compiled only the
#   targets that it happens to like during its install.
# If you choose a target here that coldstart hasn't compiled, then this script will blow up
#   below when it is deploying the DoH contracts, since the wasm/abi files won't be there.
# As of Oct/23, the only good target is the 'test' target, but the driver doesn't know that.
# --------------------------------------------------------------------------------------------

# include the tools/cth-goodies library
use lib '../../tools/cth-goodies';
use CthGoodies;

print "doh-coldstart start: will now attempt to parse command-line args; single '--target xxx' argument expected with the DoH compilation target.\n";

my ($switches, $options) = cth_standard_args_parser("target", "");

if (!exists $switches->{'target'}) {
    die "ERROR: doh-coldstart start: required '--target xxx' command-line argument not found.";
}

if ($switches->{'target'} eq 'hgm' || $switches->{'target'} eq 'prod') {
    $target = 'hgm';
} elsif ($switches->{'target'} eq 'hg1' || $switches->{'target'} eq 'staging') {
    $target = 'hg1';
} elsif ($switches->{'target'} eq 'hg2' || $switches->{'target'} eq 'dev') {
    $target = 'hg2';
} elsif ($switches->{'target'} eq 'hg3' || $switches->{'target'} eq 'test') {
    $target = 'hg3';
} elsif ($switches->{'target'} eq 'hg4' || $switches->{'target'} eq 'debug') {
    $target = 'hg4';
} else {
    die "ERROR: doh-coldstart start: unknown target: '" . $switches->{'target'} . "'.";
}

print "doh-coldstart start: Configured DoH contracts target: $target\n";

# -------------------------------------------------------------------------
# Load and parse the corresponding contracts map from local doh-contracts/
#   (fetched by get-doh.sh) in repository doh-deployment-script.
# -------------------------------------------------------------------------

print "Loading contracts map file for given driver target ...\n";

my $contracts_map = "../../local/doh-contracts/doh-deployment-script/contracts_map.$target.json";

if (! -e $contracts_map) {
    die "ERROR: Contracts map file cannot be found: $contracts_map\n";
}

my $json = load_file($contracts_map);

my $data = JSON::Tiny::decode_json($json);

# -------------------------------------------------------------------------
# Clear and start the backing coldstart driver.
# Starting coldstart also starts cleos-driver so we don't have to.
# -------------------------------------------------------------------------

print "Clearing coldstart ...\n";

$cmd = "$coldstart_dir/clear";
$o = `$cmd`;
if ($? != 0) {
    print "ERROR: coldstart clear returned an error code.\n";
    print "Output: $o\n";
    exit 1;
}

print "Starting coldstart ...\n";

$cmd = "$coldstart_dir/start";
$o = `$cmd`;
if ($? != 0) {
    print "ERROR: coldstart start returned an error code.\n";
    print "Output: $o\n";
    exit 1;
}

# -------------------------------------------------------------------------
# Figure out where the .wasm and .abi files are depending on the target.
# We expect the compiled contracts to be under local/ as per this driver's
#    install script.
#
# Here we translate the OLD target names (which is what we are using)
#   to the prod, staging, dev target names of the doh-contracts scripts.
# -------------------------------------------------------------------------

my $doh_contracts_dir = "../../local/";
if ($target eq 'hgm') {
    $doh_contracts_dir .= "prod";
} elsif ($target eq 'hg1') {
    $doh_contracts_dir .= "staging";
} elsif ($target eq 'hg2') {
    $doh_contracts_dir .= "dev";
} elsif ($target eq 'hg3') {
    $doh_contracts_dir .= "test";
} elsif ($target eq 'hg4') {
    $doh_contracts_dir .= "debug";
} else {
    die "ERROR: doh-coldstart: does not know where to fetch doh-contracts for target: $target; expected hgm, hg1 or hg2 as configured target names in the driver.\n";
}
$doh_contracts_dir .= "/doh-contracts";

print "Compiled DoH contracts for deployment will be taken from '$doh_contracts_dir'.\n";

# end result is something like:  "../../local/prod/doh-contracts"

# -------------------------------------------------------------------------
# Scan the entire contracts map for actor references that aren't created by
#   the contracts map itself.
# Create those accounts with the developer key.
# -------------------------------------------------------------------------

print "Scanning for accounts that the contracts map assumes already exist, creating them, and assigning them the developer key ...\n";

my @all_contracts_map_accounts;
my @all_permission_actor_accounts;

if (ref($data) eq 'ARRAY') {
    foreach my $e (@$data) {
        if (ref($e) eq 'HASH') {

            # save all contracts-map accounts
            my $account = $e->{account};
            if (! grep { $_ eq $account } @all_contracts_map_accounts) {
                push @all_contracts_map_accounts, $account;
            }

            # save all permission actor accounts
            foreach my $permission_level ('owner_permission_level', 'active_permission_level') {
                if (defined $e->{$permission_level} && $e->{$permission_level} ne '' && defined $e->{$permission_level}->{accounts}) {
                    my $paccs = $e->{$permission_level}->{accounts};
                    foreach my $pa (@$paccs) {
                        if (defined $pa->{permission} && defined $pa->{permission}->{actor}) {
                            my $actor = $pa->{permission}->{actor};
                            if (!grep { $_ eq $actor } @all_permission_actor_accounts) {
                                push @all_permission_actor_accounts, $actor;
                            }
                        } else {
                            print "ERROR: contracts map parse error at $account $permission_level (permission_level->accounts->permission[->actor])\n";
                        }
                    }
                } else {
                    print "ERROR: contracts map parse error at $account $permission_level (permission_level[->accounts])\n";
                }
            }
        }
    }
}

# Printing the contents of @all_contracts_map_accounts
print "Contents of \@all_contracts_map_accounts: ";
foreach my $account (@all_contracts_map_accounts) {
    print "$account ";
}
print "\n";

# Printing the contents of @all_permission_actor_accounts
print "\nContents of \@all_permission_actor_accounts: ";
foreach my $actor (@all_permission_actor_accounts) {
    print "$actor ";
}
print "\n";

my @superusers;

# Loop through @all_permission_actor_accounts and check if an element is not in @all_contracts_map_accounts
foreach my $actor (@all_permission_actor_accounts) {
    unless (grep { $_ eq $actor } @all_contracts_map_accounts) {
        push @superusers, $actor;
    }
}

# Print the contents of @superusers
print "Contents of \@superusers (Permission actors not in Contracts map): ";
foreach my $superuser (@superusers) {
    print "$superuser ";
}
print "\n";

print "Creating superusers...\n";
foreach my $superuser (@superusers) {
    print "Creating missing referenced permission actor account as superuser: $superuser\n";
    my $cleos_command = qq|$cleos system newaccount eosio $superuser EOS6MRyAjQq8ud7hVNYcfnVPJqcVpscN5So8BhtHuGYqET5GDW5CV --stake-cpu "10000.0000 EOS" --stake-net "10000.0000 EOS" --buy-ram-kbytes 1000 --transfer|;
    system($cleos_command);
}

# -------------------------------------------------------------------------
# For each doh-deployment-script entry, create accounts and deploy code
# -------------------------------------------------------------------------

print "Creating accounts and deploying contracts ...\n";

# Create and deploy from the deployment script

if (ref($data) eq 'ARRAY') {
    foreach my $e (@$data) {
        if (ref($e) eq 'HASH') {

            # Should have all these keys; shorthands for easy "$x" substitution
            my $account = $e->{account};
            my $code = $e->{code};
            my $owner_permission_level = 'EOS6MRyAjQq8ud7hVNYcfnVPJqcVpscN5So8BhtHuGYqET5GDW5CV';
            if (defined $e->{owner_permission_level} && $e->{owner_permission_level} ne '') {
                $owner_permission_level = $e->{owner_permission_level};
                $owner_permission_level = to_json_string($owner_permission_level);
            }
            my $active_permission_level = 'EOS6MRyAjQq8ud7hVNYcfnVPJqcVpscN5So8BhtHuGYqET5GDW5CV';
            if (defined $e->{active_permission_level} && $e->{active_permission_level} ne '') {
                $active_permission_level = $e->{active_permission_level};
                $active_permission_level = to_json_string($active_permission_level);
            }
            my $description = $e->{description};

            # Account resourcing from doh-deployment-script/index.js
            my $cpu = '--stake-cpu "1.0000 EOS"';
            my $net = '--stake-net "1.0000 EOS"';
            my $ram = '--buy-ram-kbytes 8';
            if ($code eq "hegemon") {
                $cpu = '--stake-cpu "3000.0000 EOS"';
                $net = '--stake-net "800.0000 EOS"';
                $ram = '--buy-ram-kbytes 12500'; # needs more
            } elsif ($code eq "crafting") {
                $cpu = '--stake-cpu "1500.0000 EOS"';
                $net = '--stake-net "600.0000 EOS"';
                $ram = '--buy-ram-kbytes 3000';
            } elsif ($code eq "dejavu") {
                $cpu = '--stake-cpu "800.0000 EOS"';
                $net = '--stake-net "400.0000 EOS"';
                $ram = '--buy-ram-kbytes 1500';
            } elsif ($code eq "distrib") {
                $cpu = '--stake-cpu "800.0000 EOS"';
                $net = '--stake-net "400.0000 EOS"';
                $ram = '--buy-ram-kbytes 2000';
            } elsif ($code eq "drip") {
                $cpu = '--stake-cpu "800.0000 EOS"';
                $net = '--stake-net "300.0000 EOS"';
                $ram = '--buy-ram-kbytes 1500';
            } elsif ($code eq "readonly") {
                $cpu = '--stake-cpu "800.0000 EOS"';
                $net = '--stake-net "400.0000 EOS"';
                $ram = '--buy-ram-kbytes 3500';
            } elsif ($code eq "logs") {
                $cpu = '--stake-cpu "800.0000 EOS"';
                $net = '--stake-net "400.0000 EOS"';
                $ram = '--buy-ram-kbytes 1700';
            } elsif ($code eq "names") {
                $cpu = '--stake-cpu "800.0000 EOS"';
                $net = '--stake-net "400.0000 EOS"';
                $ram = '--buy-ram-kbytes 17000';
            } elsif ($code eq "politics") {
                $cpu = '--stake-cpu "800.0000 EOS"';
                $net = '--stake-net "400.0000 EOS"';
                $ram = '--buy-ram-kbytes 2500';
            } elsif ($code eq "sighandler") {
                $cpu = '--stake-cpu "800.0000 EOS"';
                $net = '--stake-net "400.0000 EOS"';
                $ram = '--buy-ram-kbytes 2500';
            } elsif ($code eq "staking") {
                $cpu = '--stake-cpu "1500.0000 EOS"';
                $net = '--stake-net "600.0000 EOS"';
                $ram = '--buy-ram-kbytes 2500';
            } elsif ($code eq "tokens") {
                $cpu = '--stake-cpu "1500.0000 EOS"';
                $net = '--stake-net "600.0000 EOS"';
                $ram = '--buy-ram-kbytes 3500';
            } elsif ($code ne "") {
                $cpu = '--stake-cpu "800.0000 EOS"';
                $net = '--stake-net "400.0000 EOS"';
                $ram = '--buy-ram-kbytes 1500';
            }

            # Create the account
            print "Creating account $account ...\n";
            print "  owner : $owner_permission_level\n";
            print "  active: $active_permission_level\n";
            command(qq|$cleos system newaccount eosio $account '$owner_permission_level' '$active_permission_level' $cpu $net $ram --transfer|);

            # Set code permission to all accounts with code
            if ($code ne '') {

                # Use the OWNER permission, because the ACTIVE permission is sometimes something we don't have (e.g. some "eosio.code" permission).
                # If you remove the '-p thisaccount@owner' you can see what happens in the error log.
                command(qq|$cleos set account permission $account active --add-code -p ${account}\@owner|);
            }

            # Deploy the code if any
            if ($code ne '') {
                print "Deploying code $code to $account ... \n";

                # Since setting contract can randomly fail with "cpu quota exceeded", we may have to retry a few times.
                # If not CPU deadline exceeded error, fail immediately as the command() sub would.

                my $max_tries = 10; # maximum number of retries for set contract CPU deadline exceeded

                my $set_contract_command;
                if ($code eq 'tokens') {
                    $set_contract_command = qq|$cleos set contract $account $doh_contracts_dir/sighandler-token-contract/build/${code}/ ${code}.wasm ${code}.abi|;
                } else {
                    $set_contract_command = qq|$cleos set contract $account $doh_contracts_dir/doh-${code}-contract/build/${code}/ ${code}.wasm ${code}.abi|;
                }
                my $set_contract_success = 0;
                my $i;
                for ($i = 1; $i <= $max_tries; $i++) {

                    # Use the OWNER permission, because the ACTIVE permission is sometimes something we don't have (e.g. some "eosio.code" permission).
                    # If you remove the '-p thisaccount@owner' you can see what happens in the error log.
                    $cmd = "$set_contract_command -p ${account}\@owner 2>&1";

                    $o = `$cmd`;
                    if ($? != 0) {
                        if ($o =~ /tx_cpu_usage_exceeded/ || $o =~ /Transaction exceeded the current CPU usage limit imposed on the transaction/) {
                            print "Deployment failed for CPU deadline exceeded (during try $i of $max_tries). ";
                            if ($i < $max_tries) {
                                print "Retrying...\n";
                                next;
                            } else {
                                print "Will not try again.\n";
                            }
                        } else {
                            print "ERROR: Failed to execute: $cmd\n";
                            print "Output: $o\n";
                            fail();
                        }
                    } else {
                        $set_contract_success = 1;
                        last;
                    }
                }
                if (! $set_contract_success) {
                    print "ERROR: Failed to execute: $cmd\n";
                    print "Output: $o\n";
                    fail();
                } else {
                    print "Contract $account set";
                    if ($i > 1) {
                        print " (tried $i/$max_tries times)";
                    }
                    print ".\n";
                }
            }

        } else {
            fail("ERROR: decoded contracts map array element not a hash.\n");
        }
    }
} else {
    fail("ERROR: decoded contracts map not an array.\n");
}

print "doh-coldstart start: successfully started coldstart (localhost nodeos/Antelope at standard ports) and deployed all DoH contracts and accounts to it.\n";
