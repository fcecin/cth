#!/usr/bin/perl

# ---------------------------------------------------------------------------
# doh-coldstart install
#
# Downloads and compiles the DoH source code for a given target.
# ---------------------------------------------------------------------------

$| = 1;

use strict;
use warnings;
use Cwd;
use FindBin qw($RealBin);
use lib "$RealBin/../../tools/cth-goodies";
use CthGoodies;
use lib "$RealBin/../../tools/cth-utils";
use CthUtils;

# ---------------------------------------------------------------------------
# Global vars
# ---------------------------------------------------------------------------

my $driver = "doh-coldstart install";

# default target is the test target (hg3/tc3)
my $target = "test";

# source dir with the template
my $source_dir = "../../local/doh-contracts";

# build list of local directories for all supported targets
my @targets = ("prod", "staging", "dev", "test", "debug");
my %local_dir;
foreach my $tg (@targets) { $local_dir{$tg} = "../../local/$tg/doh-contracts"; }

my $run_build_sh = "run-build.sh";

# ---------------------------------------------------------------------------
# Utils
# ---------------------------------------------------------------------------

# change to driver dir
sub chdir_driver_dir {
    chdir_for_sure($RealBin);
}

sub chdir_target_dir {
    my $tg = shift;
    die "ERROR: doh-coldstart: chdir_target_dir target not defined" unless (defined $tg);
    chdir_driver_dir();    # absolute
    chdir_for_sure($local_dir{$tg});
}

# target is prod, staging, dev, test, debug
sub copy_doh {
    my $target = shift;
    die "ERROR: $driver: copy target not defined" unless (defined $target);

    my $destination = absolute("../../local/$target", CthUtils::ABSOLUTE_ENSURE_CREATE);

    my $to_remove = absolute($destination . "/doh-contracts", CthUtils::ABSOLUTE_MUST_RECREATE);

    system("cp -r $source_dir $destination");
    if ($? != 0) {
        print "ERROR: $driver: Failed to copy $source_dir to $destination: $!";
        exit 1;
    }
}

# ---------------------------------------------------------------------------
# First, we need to parse arguments passed to this install script.
# ---------------------------------------------------------------------------

my ($switches, $options) = cth_standard_args_parser("", "target doh");

# ---------------------------------------------------------------------------
# Take a -o target=xxx option that will tell which one we want to compile
#   (or to install --doh <dir> into).
# ---------------------------------------------------------------------------

if (defined $options->{'target'}) {
    my $opt = $options->{'target'};
    if (doh_get_suffix_from_target($opt)) {
        $target = $opt;
    } else {
        $target = doh_get_target_from_suffix($opt);
        if (! $target) {
            print "ERROR: $driver: unknown target: '$opt'.\n";
            exit 1;
        }
    }
    print "$driver: target set to '$target' via command-line option\n";
}

# ---------------------------------------------------------------------------
# Go to the driver dir
# ---------------------------------------------------------------------------

chdir_driver_dir();

# ---------------------------------------------------------------------------
# Check if we are going to skip download and compilation, and instead fetch
#   a local DoH tree that's already compiled.
#
# The option -o doh=<directory> allows the user (e.g. via cth --run or
#   cth -i) instruct the doh-coldstart driver to take the given directory,
#   which should be a fully set-up version of the DoH source code that's
#   already fully compiled to wasm/abi files, and then copy its contents
#   to the correct local/doh-coldstart/... directory where this driver
#   would be otherwise downloading the DoH source code in and compiling it.
# The given directory must either be an absolute path or a path relative to
#   this driver's directory.
# ---------------------------------------------------------------------------

if (defined $options->{'doh'}) {

    my $doh_dir = $options->{'doh'};

    print "$driver: Ensuring given --doh directory exists (must be absolute or relative to " . getcwd() . "): '$doh_dir': $!\n";

    my $abs_doh_dir = absolute($doh_dir, CthUtils::ABSOLUTE_MUST_EXIST);

    print "$driver: (Re)creating local/$target/doh-contracts ...\n";

    my $abs_destination = absolute("../../local/$target/doh-contracts", CthUtils::ABSOLUTE_MUST_RECREATE);

    print "$driver: Copying all files inside given --doh directory '$abs_doh_dir'(/*) into '$abs_destination' ...\n";

    system("cp -r $abs_doh_dir/* $abs_destination") == 0 or die "ERROR: $driver: Failed to copy everything inside '$abs_doh_dir' to '$abs_destination': $!";

    print "$driver: Given DoH source/binaries installed successfully.\n";
    exit 0;
}

# ---------------------------------------------------------------------------
# We need to download the DoH source code, since it is no longer
#   a submodule. This is done by tools/get-doh/get-doh.sh.
# ---------------------------------------------------------------------------

print "$driver: Ensuring source directory exists: $source_dir\n";

$source_dir = absolute($source_dir, CthUtils::ABSOLUTE_MUST_EXIST);

print "$driver: Downloading latest DoH source code to $source_dir using tools/get-doh.sh\n";

system("../../tools/get-doh/get-doh.sh $source_dir") == 0 or die "ERROR: $driver: Failed to get DoH source code: $!";

# ---------------------------------------------------------------------------
# The doh-contracts assembled by get-doh.sh is a CODE TEMPLATE. It is not actual
#   source code for the DoH contracts suite. It has to be preprocessed for
#   ALL DoH targets to produce several different DoH contract suites that are
#   specific to each target.
#
# This driver will only build one target, which is "test" (hg3/tc3).
# Ideally, we'd build and test only the production target: we'd like to
#   test the version of the game that is actually deployed. The various
#   targets were invented to facilitate humans and human-interactive
#   shell scripts testing vs. a shared remote game deployment.
# On the other hand, automated testing is (mostly) run against a local
#   blockchain node with the deployed game, with full control of setting
#   objects (setplayer, etc.), the RNG and clock. The added convenience
#   of having more forgiving game constants is more of a hindrance than
#   a help for automated testing, though its great for people-testers
#   and shared blockchain/contracts remote testing.
# It's still contentions whether we want to enable clock and RNG for
#   the production constants/content, which would allow automated testing
#   (I don't remember why exactly this was disabled and how right now),
#   so as discussed we'll write automated tests for the test (hg3/tc3)
#   target for now.
# ---------------------------------------------------------------------------

print "$driver: Checking for doh-contracts at $source_dir\n";

if (-e "$source_dir/$run_build_sh") {
    print "$driver: DoH contracts found.\n";
} else {
    print "ERROR: $driver: DoH contracts not found in the expected tools directory path.\n";
    exit 1;
}

# ---------------------------------------------------------------------------
# Create a DoH source code copy for each compilation target
#
# Copy the tools/doh-contracts template to:
#   local/prod/doh-contracts/
#   local/staging/doh-contracts/
#   local/dev/doh-contracts/
#   local/test/doh-contracts/
#   local/debug/doh-contracts/
# ---------------------------------------------------------------------------

print "$driver: Copying contract templates to local/ for all DoH targets ...\n";

foreach my $tg (@targets) {
    copy_doh($tg);
}

# ---------------------------------------------------------------------------
# Customize contract source code for each compilation target
#
#   local/prod/doh-contracts/set-prod.sh
#   local/staging/doh-contracts/set-staging.sh
#   local/dev/doh-contracts/set-dev.sh
#   local/test/doh-contracts/set-test.sh
#   local/test/doh-contracts/set-debug.sh
# ---------------------------------------------------------------------------

print "$driver: Instantiating contract templates on local/ for all DoH targets ...\n";

foreach my $tg (@targets) {
    chdir_target_dir($tg);
    system("./set-$tg.sh") == 0 or die "ERROR: $driver: Failed to create '$tg' contracts: $!";
}

# ---------------------------------------------------------------------------
# Compile DoH
#
# Compile just $target ('test' (hg3/tc3) is the default)
# ---------------------------------------------------------------------------

my $COMPILE_ERROR_FILE = 'COMPILE_ERROR';

print "$driver: ************************************************************************************************\n";
print "$driver: *** SKIPPING COMPILATION of all DoH targets that are not the '$target' target!!!\n";
print "$driver: *** Tests that try to run with any target other than the '$target' target will fail.\n";
print "$driver: ************************************************************************************************\n";

print "$driver: Building DoH for compilation target '$target' ONLY...\n";

chdir_target_dir($target);

# Find all subdirectories that have a CMakeLists.txt in them (meaning it's a compilable contract dir)
opendir(my $dh, '.') or die "ERROR: $driver: Could not open the current directory: $!";
my @directories = grep { -d "./$_" && ! /^\.{1,2}$/ && -e "./$_/CMakeLists.txt" } readdir($dh);
closedir($dh);
my $total_dirs = scalar @directories;
print "$driver: Found $total_dirs contracts to compile.\n";

# Print the contract list and clean up the build dirs on each
@directories = sort @directories;
foreach my $di (@directories) {
    system("rm -rf $di/build");
    print "$driver: Contract to compile: $di\n";
}

# Remove the compile error file if any
unlink($COMPILE_ERROR_FILE);

# Compile
for my $i (0 .. $total_dirs - 1) {
    my $dir = $directories[$i];
    print "$driver: Compiling $dir\n";

    system("mkdir -p $dir/build");

    my $error = 0;

    if (chdir("$dir/build")) {
        my $build_dir = getcwd();
        chomp($build_dir);
        system("cmake .. > cmake.log 2>&1");
        if ($? != 0) {
            print "$driver: COMPILE ERROR: cmake error for '$dir'. Log in $build_dir/cmake.log\n";
            $error = 1;
        } else {
            system("make -j 6 > make.log 2>&1");
            if ($? != 0) {
                print "$driver: COMPILE ERROR: make error for '$dir'. Log in $build_dir/make.log\n";
                $error = 1;
            } else {
                print "$driver: Successfully compiled '$dir'\n";
            }
        }
        chdir("../..");
    } else {
        print "$driver: ERROR: Failed to change to directory: $dir - $!\n";
        $error = 1;
    }

    if ($error != 0) {
        `echo "$dir" >> $COMPILE_ERROR_FILE`;
    }
}

if (-e $COMPILE_ERROR_FILE) {
    print "ERROR: $driver: DoH source code compilation failed for the following contracts:\n";
    print `cat $COMPILE_ERROR_FILE`;
    exit 1;
}

print "Successfully built DoH.\n";
